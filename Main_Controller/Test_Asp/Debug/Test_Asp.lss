
Test_Asp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000041e  00800200  00001e36  00001eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  0080061e  0080061e  000022e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052a8  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001880  00000000  00000000  00007980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026d5  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000938  00000000  00000000  0000b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6a  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e36  00000000  00000000  0000ce7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__vector_5>
      18:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_6>
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_15>
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <__vector_23>
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	9b c3       	rjmp	.+1846   	; 0x79c <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	27 c6       	rjmp	.+3150   	; 0xd1c <__vector_51>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	9f c4       	rjmp	.+2366   	; 0xa18 <__vector_54>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	16 e0       	ldi	r17, 0x06	; 6
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e3       	ldi	r30, 0x36	; 54
      fc:	fe e1       	ldi	r31, 0x1E	; 30
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 31       	cpi	r26, 0x1E	; 30
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	ae e1       	ldi	r26, 0x1E	; 30
     112:	b6 e0       	ldi	r27, 0x06	; 6
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 36       	cpi	r26, 0x6F	; 111
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	39 d7       	rcall	.+3698   	; 0xf92 <main>
     120:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <ADC_init>:
#include <avr/io.h>
#include "ADC.h"

void ADC_init(void){//initialize ADC Registers
ADMUX=0b01000000;
     126:	80 e4       	ldi	r24, 0x40	; 64
     128:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
ADCSRA=0b10000011;
     12c:	83 e8       	ldi	r24, 0x83	; 131
     12e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     132:	08 95       	ret

00000134 <Temp_ADC_read>:
}
//4 flag   6 start
float Temp_ADC_read(void){//Read Analog Value
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	1f 92       	push	r1
     13a:	1f 92       	push	r1
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
	volatile signed int volt; 
	ADMUX=0b01000000;
     140:	80 e4       	ldi	r24, 0x40	; 64
     142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	setbit(ADCSRA,4); // clear flag
     146:	ea e7       	ldi	r30, 0x7A	; 122
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	80 61       	ori	r24, 0x10	; 16
     14e:	80 83       	st	Z, r24
	setbit(ADCSRA,6); //start conversion bit register
     150:	80 81       	ld	r24, Z
     152:	80 64       	ori	r24, 0x40	; 64
     154:	80 83       	st	Z, r24
	while(readbit(ADCSRA,4)==0){ }; //wait for coversion til flag became one
     156:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     15a:	84 ff       	sbrs	r24, 4
     15c:	fc cf       	rjmp	.-8      	; 0x156 <Temp_ADC_read+0x22>
	volt=ADC;
     15e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     162:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     166:	9a 83       	std	Y+2, r25	; 0x02
     168:	89 83       	std	Y+1, r24	; 0x01

   return volt;
     16a:	69 81       	ldd	r22, Y+1	; 0x01
     16c:	7a 81       	ldd	r23, Y+2	; 0x02
     16e:	07 2e       	mov	r0, r23
     170:	00 0c       	add	r0, r0
     172:	88 0b       	sbc	r24, r24
     174:	99 0b       	sbc	r25, r25
     176:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__floatsisf>
}
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <Init_Reg>:
char receivedData[10]; 
char raspberryData[10];

void Init_Reg()
{
	SPI_init_Master();
     184:	1f d7       	rcall	.+3646   	; 0xfc4 <SPI_init_Master>
	gsm_init();
     186:	9a d4       	rcall	.+2356   	; 0xabc <gsm_init>
	gps_init();
     188:	f2 d5       	rcall	.+3044   	; 0xd6e <gps_init>
     18a:	de d7       	rcall	.+4028   	; 0x1148 <ultra0_init>
	ultra0_init();
     18c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <ultra1_init>
	ultra1_init();
     190:	44 d7       	rcall	.+3720   	; 0x101a <UART0_init>
	UART0_init();
     192:	70 d7       	rcall	.+3808   	; 0x1074 <UART3_init>
	UART3_init();
     194:	80 d4       	rcall	.+2304   	; 0xa96 <Car_Init>
    Car_Init();
     196:	c7 df       	rcall	.-114    	; 0x126 <ADC_init>
	ADC_init();
     198:	78 94       	sei
     19a:	8d b1       	in	r24, 0x0d	; 13
	sei();			  //global interrupt enable
     19c:	87 7f       	andi	r24, 0xF7	; 247
	clearbit(DDRE,3); //for accident sensing
     19e:	8d b9       	out	0x0d, r24	; 13
     1a0:	df d7       	rcall	.+4030   	; 0x1160 <ultra0_triger>
     1a2:	0e 94 6e 09 	call	0x12dc	; 0x12dc <ultra1_triger>
	ultra0_triger();
	ultra1_triger();
     1a6:	84 b1       	in	r24, 0x04	; 4
	clearbit(DDRB,4); //for drownis sent by raspberry
     1a8:	8f 7e       	andi	r24, 0xEF	; 239
     1aa:	84 b9       	out	0x04, r24	; 4
     1ac:	82 e0       	ldi	r24, 0x02	; 2

	UART0_sendString("y,no\n\r");
     1ae:	92 e0       	ldi	r25, 0x02	; 2
     1b0:	77 d7       	rcall	.+3822   	; 0x10a0 <UART0_sendString>
     1b2:	89 ef       	ldi	r24, 0xF9	; 249
     1b4:	93 e0       	ldi	r25, 0x03	; 3
	UART0_sendString("\n\r");
     1b6:	74 d7       	rcall	.+3816   	; 0x10a0 <UART0_sendString>
     1b8:	2f e7       	ldi	r18, 0x7F	; 127
     1ba:	8a e1       	ldi	r24, 0x1A	; 26
     1bc:	96 e0       	ldi	r25, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	21 50       	subi	r18, 0x01	; 1
     1c0:	80 40       	sbci	r24, 0x00	; 0
     1c2:	90 40       	sbci	r25, 0x00	; 0
     1c4:	e1 f7       	brne	.-8      	; 0x1be <Init_Reg+0x3a>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Init_Reg+0x44>
     1c8:	00 00       	nop
     1ca:	89 e0       	ldi	r24, 0x09	; 9
	_delay_ms(2000);
	UART0_sendString("x,no\n\r");
     1cc:	92 e0       	ldi	r25, 0x02	; 2
     1ce:	68 d7       	rcall	.+3792   	; 0x10a0 <UART0_sendString>
     1d0:	89 ef       	ldi	r24, 0xF9	; 249
     1d2:	93 e0       	ldi	r25, 0x03	; 3
	UART0_sendString("\n\r");
     1d4:	65 d7       	rcall	.+3786   	; 0x10a0 <UART0_sendString>
     1d6:	2f e7       	ldi	r18, 0x7F	; 127
     1d8:	8a e1       	ldi	r24, 0x1A	; 26
     1da:	96 e0       	ldi	r25, 0x06	; 6
     1dc:	21 50       	subi	r18, 0x01	; 1
     1de:	80 40       	sbci	r24, 0x00	; 0
     1e0:	90 40       	sbci	r25, 0x00	; 0
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <Init_Reg+0x58>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <Init_Reg+0x62>
     1e6:	00 00       	nop
     1e8:	08 95       	ret

000001ea <Accident_Detect>:
     1ea:	63 99       	sbic	0x0c, 3	; 12
     1ec:	69 c4       	rjmp	.+2258   	; 0xac0 <gsm_send_accident_message>
     1ee:	08 95       	ret

000001f0 <Temp_read>:
		gsm_send_accident_message();
	}
}

void Temp_read()
{
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	cd b7       	in	r28, 0x3d	; 61
     1fe:	de b7       	in	r29, 0x3e	; 62
     200:	2a 97       	sbiw	r28, 0x0a	; 10
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
	float RES;
	float volt;
	char RES_Str[10];
	volt=Temp_ADC_read();
     20c:	93 df       	rcall	.-218    	; 0x134 <Temp_ADC_read>
	RES=(float)(5*volt)/1023;//conversation for LM45 Sensor
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 ea       	ldi	r20, 0xA0	; 160
     214:	50 e4       	ldi	r21, 0x40	; 64
     216:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__mulsf3>
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	30 ec       	ldi	r19, 0xC0	; 192
     21e:	4f e7       	ldi	r20, 0x7F	; 127
     220:	54 e4       	ldi	r21, 0x44	; 68
     222:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divsf3>
	RES*=100;
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	48 ec       	ldi	r20, 0xC8	; 200
     22c:	52 e4       	ldi	r21, 0x42	; 66
     22e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__mulsf3>
     232:	6b 01       	movw	r12, r22
     234:	7c 01       	movw	r14, r24
	itoa(RES,RES_Str,10);
     236:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__fixsfsi>
     23a:	dc 01       	movw	r26, r24
     23c:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     23e:	4a e0       	ldi	r20, 0x0A	; 10
     240:	be 01       	movw	r22, r28
     242:	6f 5f       	subi	r22, 0xFF	; 255
     244:	7f 4f       	sbci	r23, 0xFF	; 255
     246:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__itoa_ncheck>
    UART0_sendString("z,");
     24a:	80 e1       	ldi	r24, 0x10	; 16
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	28 d7       	rcall	.+3664   	; 0x10a0 <UART0_sendString>
	UART0_sendString(RES_Str);
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	25 d7       	rcall	.+3658   	; 0x10a0 <UART0_sendString>
	UART0_sendString(" c\n");
     256:	83 e1       	ldi	r24, 0x13	; 19
     258:	92 e0       	ldi	r25, 0x02	; 2
     25a:	22 d7       	rcall	.+3652   	; 0x10a0 <UART0_sendString>
	UART0_sendString(" \n\r");
     25c:	88 ef       	ldi	r24, 0xF8	; 248
     25e:	93 e0       	ldi	r25, 0x03	; 3
     260:	1f d7       	rcall	.+3646   	; 0x10a0 <UART0_sendString>
     262:	c3 df       	rcall	.-122    	; 0x1ea <Accident_Detect>
	Accident_Detect();/***********acident check*************/
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	30 e0       	ldi	r19, 0x00	; 0
	
	if(RES>60)
     268:	40 e7       	ldi	r20, 0x70	; 112
     26a:	52 e4       	ldi	r21, 0x42	; 66
     26c:	c7 01       	movw	r24, r14
     26e:	b6 01       	movw	r22, r12
     270:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__gesf2>
     274:	18 16       	cp	r1, r24
     276:	e4 f4       	brge	.+56     	; 0x2b0 <Temp_read+0xc0>
	{
		Accident_Detect();
     278:	b8 df       	rcall	.-144    	; 0x1ea <Accident_Detect>
     27a:	89 e6       	ldi	r24, 0x69	; 105
		SPI_sendByte('i');
     27c:	b2 d6       	rcall	.+3428   	; 0xfe2 <SPI_sendByte>
     27e:	2f ed       	ldi	r18, 0xDF	; 223
     280:	82 e2       	ldi	r24, 0x22	; 34
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	21 50       	subi	r18, 0x01	; 1
     286:	80 40       	sbci	r24, 0x00	; 0
     288:	90 40       	sbci	r25, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <Temp_read+0x94>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <Temp_read+0x9e>
     28e:	00 00       	nop
     290:	87 e1       	ldi	r24, 0x17	; 23
		_delay_ms(700);
		UART0_sendString("t,High Temp\n\r");
     292:	92 e0       	ldi	r25, 0x02	; 2
     294:	05 d7       	rcall	.+3594   	; 0x10a0 <UART0_sendString>
     296:	80 e3       	ldi	r24, 0x30	; 48
     298:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
		status='0';
     29c:	2f eb       	ldi	r18, 0xBF	; 191
     29e:	87 e2       	ldi	r24, 0x27	; 39
     2a0:	99 e0       	ldi	r25, 0x09	; 9
     2a2:	21 50       	subi	r18, 0x01	; 1
     2a4:	80 40       	sbci	r24, 0x00	; 0
     2a6:	90 40       	sbci	r25, 0x00	; 0
     2a8:	e1 f7       	brne	.-8      	; 0x2a2 <Temp_read+0xb2>
     2aa:	00 c0       	rjmp	.+0      	; 0x2ac <Temp_read+0xbc>
     2ac:	00 00       	nop
		_delay_ms(3000);	
		Temp_read();
     2ae:	a0 df       	rcall	.-192    	; 0x1f0 <Temp_read>
     2b0:	85 e2       	ldi	r24, 0x25	; 37
	}
	UART0_sendString("t,No Error\n\r");
     2b2:	92 e0       	ldi	r25, 0x02	; 2
     2b4:	f5 d6       	rcall	.+3562   	; 0x10a0 <UART0_sendString>
     2b6:	2f eb       	ldi	r18, 0xBF	; 191
     2b8:	87 e2       	ldi	r24, 0x27	; 39
     2ba:	99 e0       	ldi	r25, 0x09	; 9
     2bc:	21 50       	subi	r18, 0x01	; 1
     2be:	80 40       	sbci	r24, 0x00	; 0
     2c0:	90 40       	sbci	r25, 0x00	; 0
     2c2:	e1 f7       	brne	.-8      	; 0x2bc <Temp_read+0xcc>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <Temp_read+0xd6>
     2c6:	00 00       	nop
     2c8:	81 e3       	ldi	r24, 0x31	; 49
     2ca:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
	_delay_ms(3000);
	status='1';
     2ce:	2a 96       	adiw	r28, 0x0a	; 10
     2d0:	0f b6       	in	r0, 0x3f	; 63
}
     2d2:	f8 94       	cli
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	08 95       	ret

000002e8 <Front_ultra_trigger>:
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
/****************************************************************************/
void Front_ultra_trigger()
{
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	2a 97       	sbiw	r28, 0x0a	; 10
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t distance_str1[10];

	ultra1_triger();
     2fc:	ef d7       	rcall	.+4062   	; 0x12dc <ultra1_triger>
     2fe:	4a e0       	ldi	r20, 0x0A	; 10
     300:	be 01       	movw	r22, r28
     302:	6f 5f       	subi	r22, 0xFF	; 255
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <distance1>
     30a:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <distance1+0x1>
     30e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__itoa_ncheck>
	
	itoa(distance1,distance_str1,10);
	UART0_sendString("u,");
     312:	82 e3       	ldi	r24, 0x32	; 50
     314:	92 e0       	ldi	r25, 0x02	; 2
     316:	c4 d6       	rcall	.+3464   	; 0x10a0 <UART0_sendString>
	UART0_sendString(distance_str1);
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	c1 d6       	rcall	.+3458   	; 0x10a0 <UART0_sendString>
	UART0_sendString(" Cm.\n");
     31e:	85 e3       	ldi	r24, 0x35	; 53
     320:	92 e0       	ldi	r25, 0x02	; 2
     322:	be d6       	rcall	.+3452   	; 0x10a0 <UART0_sendString>
	UART0_sendString(" \n\r");
     324:	88 ef       	ldi	r24, 0xF8	; 248
     326:	93 e0       	ldi	r25, 0x03	; 3
     328:	bb d6       	rcall	.+3446   	; 0x10a0 <UART0_sendString>
     32a:	83 ed       	ldi	r24, 0xD3	; 211
     32c:	90 e3       	ldi	r25, 0x30	; 48
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <Front_ultra_trigger+0x46>
     332:	00 c0       	rjmp	.+0      	; 0x334 <Front_ultra_trigger+0x4c>
     334:	00 00       	nop
	_delay_ms(50);
	Accident_Detect();/***********acident check*************/
     336:	59 df       	rcall	.-334    	; 0x1ea <Accident_Detect>
     338:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <distance1>
	
	if (distance1<120 && distance1>75)
     33c:	90 91 6c 06 	lds	r25, 0x066C	; 0x80066c <distance1+0x1>
     340:	9c 01       	movw	r18, r24
     342:	2c 54       	subi	r18, 0x4C	; 76
     344:	31 09       	sbc	r19, r1
     346:	2c 32       	cpi	r18, 0x2C	; 44
     348:	31 05       	cpc	r19, r1
     34a:	38 f4       	brcc	.+14     	; 0x35a <Front_ultra_trigger+0x72>
	{
			UART0_sendString("o\n\r");
     34c:	8c e0       	ldi	r24, 0x0C	; 12
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	a7 d6       	rcall	.+3406   	; 0x10a0 <UART0_sendString>
			UART0_sendString("o\n\r");
     352:	8c e0       	ldi	r24, 0x0C	; 12
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	a4 d6       	rcall	.+3400   	; 0x10a0 <UART0_sendString>
     358:	51 c0       	rjmp	.+162    	; 0x3fc <Front_ultra_trigger+0x114>
	}
	else if (distance1<=75)
     35a:	8c 34       	cpi	r24, 0x4C	; 76
     35c:	91 05       	cpc	r25, r1
     35e:	b4 f5       	brge	.+108    	; 0x3cc <Front_ultra_trigger+0xe4>
	{
		SPI_sendByte('i');
     360:	89 e6       	ldi	r24, 0x69	; 105
     362:	3f d6       	rcall	.+3198   	; 0xfe2 <SPI_sendByte>
     364:	9f e9       	ldi	r25, 0x9F	; 159
     366:	26 e8       	ldi	r18, 0x86	; 134
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	91 50       	subi	r25, 0x01	; 1
     36c:	20 40       	sbci	r18, 0x00	; 0
     36e:	80 40       	sbci	r24, 0x00	; 0
     370:	e1 f7       	brne	.-8      	; 0x36a <Front_ultra_trigger+0x82>
     372:	00 c0       	rjmp	.+0      	; 0x374 <Front_ultra_trigger+0x8c>
     374:	00 00       	nop
		_delay_ms(500);
		UART0_sendString("n\n\r");
     376:	84 eb       	ldi	r24, 0xB4	; 180
     378:	95 e0       	ldi	r25, 0x05	; 5
     37a:	92 d6       	rcall	.+3364   	; 0x10a0 <UART0_sendString>
     37c:	9f e3       	ldi	r25, 0x3F	; 63
     37e:	2d e0       	ldi	r18, 0x0D	; 13
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	91 50       	subi	r25, 0x01	; 1
     384:	20 40       	sbci	r18, 0x00	; 0
     386:	80 40       	sbci	r24, 0x00	; 0
     388:	e1 f7       	brne	.-8      	; 0x382 <Front_ultra_trigger+0x9a>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <Front_ultra_trigger+0xa4>
     38c:	00 00       	nop
		_delay_ms(1000);
		UART0_sendString("n\n\r");
     38e:	84 eb       	ldi	r24, 0xB4	; 180
     390:	95 e0       	ldi	r25, 0x05	; 5
     392:	86 d6       	rcall	.+3340   	; 0x10a0 <UART0_sendString>
     394:	9f ed       	ldi	r25, 0xDF	; 223
     396:	23 e9       	ldi	r18, 0x93	; 147
     398:	84 e0       	ldi	r24, 0x04	; 4
     39a:	91 50       	subi	r25, 0x01	; 1
     39c:	20 40       	sbci	r18, 0x00	; 0
     39e:	80 40       	sbci	r24, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <Front_ultra_trigger+0xb2>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <Front_ultra_trigger+0xbc>
		_delay_ms(1500);
		UART0_sendString("u,");
     3a4:	00 00       	nop
     3a6:	82 e3       	ldi	r24, 0x32	; 50
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	7a d6       	rcall	.+3316   	; 0x10a0 <UART0_sendString>
		UART0_sendString(distance_str1);
     3ac:	ce 01       	movw	r24, r28
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	77 d6       	rcall	.+3310   	; 0x10a0 <UART0_sendString>
     3b2:	8b e3       	ldi	r24, 0x3B	; 59
		UART0_sendString(" Cm.\n\r");
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	74 d6       	rcall	.+3304   	; 0x10a0 <UART0_sendString>
     3b8:	9f e1       	ldi	r25, 0x1F	; 31
     3ba:	21 ea       	ldi	r18, 0xA1	; 161
     3bc:	87 e0       	ldi	r24, 0x07	; 7
     3be:	91 50       	subi	r25, 0x01	; 1
     3c0:	20 40       	sbci	r18, 0x00	; 0
     3c2:	80 40       	sbci	r24, 0x00	; 0
     3c4:	e1 f7       	brne	.-8      	; 0x3be <Front_ultra_trigger+0xd6>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <Front_ultra_trigger+0xe0>
     3c8:	00 00       	nop
     3ca:	18 c0       	rjmp	.+48     	; 0x3fc <Front_ultra_trigger+0x114>
     3cc:	81 e2       	ldi	r24, 0x21	; 33
		_delay_ms(2500);
	}
	else
	{
		UART0_sendString("p\n\r");
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	67 d6       	rcall	.+3278   	; 0x10a0 <UART0_sendString>
     3d2:	9f e9       	ldi	r25, 0x9F	; 159
     3d4:	26 e8       	ldi	r18, 0x86	; 134
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	91 50       	subi	r25, 0x01	; 1
     3da:	20 40       	sbci	r18, 0x00	; 0
     3dc:	80 40       	sbci	r24, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <Front_ultra_trigger+0xf0>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <Front_ultra_trigger+0xfa>
     3e2:	00 00       	nop
     3e4:	81 e2       	ldi	r24, 0x21	; 33
		_delay_ms(500);
		UART0_sendString("p\n\r");
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	5b d6       	rcall	.+3254   	; 0x10a0 <UART0_sendString>
     3ea:	9f e9       	ldi	r25, 0x9F	; 159
     3ec:	26 e8       	ldi	r18, 0x86	; 134
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	91 50       	subi	r25, 0x01	; 1
     3f2:	20 40       	sbci	r18, 0x00	; 0
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <Front_ultra_trigger+0x108>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <Front_ultra_trigger+0x112>
     3fa:	00 00       	nop
     3fc:	2a 96       	adiw	r28, 0x0a	; 10
     3fe:	0f b6       	in	r0, 0x3f	; 63
		_delay_ms(500);

	}
}
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <Alcohol_check>:
     40e:	03 99       	sbic	0x00, 3	; 0
     410:	4a c0       	rjmp	.+148    	; 0x4a6 <Alcohol_check+0x98>
/*****************************************************************************/
void Alcohol_check()
{
	if (readbit(PINA,3)==0)
	{
		Accident_Detect();/***********acident check*************/
     412:	eb de       	rcall	.-554    	; 0x1ea <Accident_Detect>
		UART0_sendString("x,Yes\n\r");
     414:	82 e4       	ldi	r24, 0x42	; 66
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	43 d6       	rcall	.+3206   	; 0x10a0 <UART0_sendString>
		SPI_sendByte('i');
     41a:	89 e6       	ldi	r24, 0x69	; 105
     41c:	e2 d5       	rcall	.+3012   	; 0xfe2 <SPI_sendByte>
     41e:	80 e3       	ldi	r24, 0x30	; 48
		status='0';
     420:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
     424:	2f e3       	ldi	r18, 0x3F	; 63
     426:	8d e0       	ldi	r24, 0x0D	; 13
     428:	93 e0       	ldi	r25, 0x03	; 3
     42a:	21 50       	subi	r18, 0x01	; 1
     42c:	80 40       	sbci	r24, 0x00	; 0
     42e:	90 40       	sbci	r25, 0x00	; 0
     430:	e1 f7       	brne	.-8      	; 0x42a <Alcohol_check+0x1c>
     432:	00 c0       	rjmp	.+0      	; 0x434 <Alcohol_check+0x26>
     434:	00 00       	nop
		_delay_ms(1000);
		UART0_sendString("x,Yes\n\r");
     436:	82 e4       	ldi	r24, 0x42	; 66
     438:	92 e0       	ldi	r25, 0x02	; 2
     43a:	32 d6       	rcall	.+3172   	; 0x10a0 <UART0_sendString>
     43c:	2f e7       	ldi	r18, 0x7F	; 127
     43e:	8a e1       	ldi	r24, 0x1A	; 26
     440:	96 e0       	ldi	r25, 0x06	; 6
     442:	21 50       	subi	r18, 0x01	; 1
     444:	80 40       	sbci	r24, 0x00	; 0
     446:	90 40       	sbci	r25, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <Alcohol_check+0x34>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <Alcohol_check+0x3e>
     44c:	00 00       	nop
		_delay_ms(2000);
		UART0_sendString("t,Alcohol Detected\n\r");
     44e:	8a e4       	ldi	r24, 0x4A	; 74
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	26 d6       	rcall	.+3148   	; 0x10a0 <UART0_sendString>
     454:	2f e3       	ldi	r18, 0x3F	; 63
     456:	8d e0       	ldi	r24, 0x0D	; 13
     458:	93 e0       	ldi	r25, 0x03	; 3
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	80 40       	sbci	r24, 0x00	; 0
     45e:	90 40       	sbci	r25, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <Alcohol_check+0x4c>
     462:	00 c0       	rjmp	.+0      	; 0x464 <Alcohol_check+0x56>
		_delay_ms(1000);
		drowsy_smoke_alcohol_message();/************send message************/
     464:	00 00       	nop
     466:	b9 d3       	rcall	.+1906   	; 0xbda <drowsy_smoke_alcohol_message>
		while (readbit(PINA,3)==0)
		{
		Accident_Detect();/***********acident check*************/
     468:	01 c0       	rjmp	.+2      	; 0x46c <Alcohol_check+0x5e>
     46a:	bf de       	rcall	.-642    	; 0x1ea <Accident_Detect>
		UART0_sendString("x,Yes\n\r");
		_delay_ms(2000);
		UART0_sendString("t,Alcohol Detected\n\r");
		_delay_ms(1000);
		drowsy_smoke_alcohol_message();/************send message************/
		while (readbit(PINA,3)==0)
     46c:	03 9b       	sbis	0x00, 3	; 0
     46e:	fd cf       	rjmp	.-6      	; 0x46a <Alcohol_check+0x5c>
		{
		Accident_Detect();/***********acident check*************/
		}	
		UART0_sendString("x,no\n\r");
     470:	89 e0       	ldi	r24, 0x09	; 9
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	15 d6       	rcall	.+3114   	; 0x10a0 <UART0_sendString>
     476:	2f e1       	ldi	r18, 0x1F	; 31
     478:	81 ea       	ldi	r24, 0xA1	; 161
     47a:	97 e0       	ldi	r25, 0x07	; 7
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	80 40       	sbci	r24, 0x00	; 0
     480:	90 40       	sbci	r25, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <Alcohol_check+0x6e>
     484:	00 c0       	rjmp	.+0      	; 0x486 <Alcohol_check+0x78>
     486:	00 00       	nop
        _delay_ms(2500);
		UART0_sendString("t,No Error\n\r");
     488:	85 e2       	ldi	r24, 0x25	; 37
     48a:	92 e0       	ldi	r25, 0x02	; 2
     48c:	09 d6       	rcall	.+3090   	; 0x10a0 <UART0_sendString>
     48e:	2f e1       	ldi	r18, 0x1F	; 31
     490:	81 ea       	ldi	r24, 0xA1	; 161
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <Alcohol_check+0x86>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <Alcohol_check+0x90>
     49e:	00 00       	nop
     4a0:	81 e3       	ldi	r24, 0x31	; 49
        _delay_ms(2500);
		status='1';
     4a2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
     4a6:	08 95       	ret

000004a8 <Back_ultra_trigge>:
     4a8:	cf 93       	push	r28
	}
}

/***************************************************************************/
void Back_ultra_trigge()
{
     4aa:	df 93       	push	r29
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	2a 97       	sbiw	r28, 0x0a	; 10
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
	uint8_t distance_str0[10];

	ultra0_triger();
     4bc:	51 d6       	rcall	.+3234   	; 0x1160 <ultra0_triger>
     4be:	4a e0       	ldi	r20, 0x0A	; 10
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <distance0>
     4ca:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <distance0+0x1>
     4ce:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__itoa_ncheck>
	
	itoa(distance0,distance_str0,10);
	UART0_sendString("v,");
     4d2:	8f e5       	ldi	r24, 0x5F	; 95
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	e4 d5       	rcall	.+3016   	; 0x10a0 <UART0_sendString>
	UART0_sendString(distance_str0);
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	e1 d5       	rcall	.+3010   	; 0x10a0 <UART0_sendString>
	UART0_sendString(" Cm.\n");
     4de:	85 e3       	ldi	r24, 0x35	; 53
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	de d5       	rcall	.+3004   	; 0x10a0 <UART0_sendString>
	UART0_sendString(" \n\r");
     4e4:	88 ef       	ldi	r24, 0xF8	; 248
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	db d5       	rcall	.+2998   	; 0x10a0 <UART0_sendString>
     4ea:	83 ed       	ldi	r24, 0xD3	; 211
     4ec:	90 e3       	ldi	r25, 0x30	; 48
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <Back_ultra_trigge+0x46>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <Back_ultra_trigge+0x4c>
     4f4:	00 00       	nop
	_delay_ms(50);
	Accident_Detect();/***********acident check*************/
     4f6:	79 de       	rcall	.-782    	; 0x1ea <Accident_Detect>
     4f8:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <distance0>
	
	if (distance0<120 && distance0>70)
     4fc:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <distance0+0x1>
     500:	9c 01       	movw	r18, r24
     502:	27 54       	subi	r18, 0x47	; 71
     504:	31 09       	sbc	r19, r1
     506:	21 33       	cpi	r18, 0x31	; 49
     508:	31 05       	cpc	r19, r1
     50a:	38 f4       	brcc	.+14     	; 0x51a <Back_ultra_trigge+0x72>
	{
		UART0_sendString("o\n\r");
     50c:	8c e0       	ldi	r24, 0x0C	; 12
     50e:	92 e0       	ldi	r25, 0x02	; 2
     510:	c7 d5       	rcall	.+2958   	; 0x10a0 <UART0_sendString>
     512:	8c e0       	ldi	r24, 0x0C	; 12
		UART0_sendString("o\n\r");
     514:	92 e0       	ldi	r25, 0x02	; 2
     516:	c4 d5       	rcall	.+2952   	; 0x10a0 <UART0_sendString>
     518:	3f c0       	rjmp	.+126    	; 0x598 <Back_ultra_trigge+0xf0>
     51a:	87 34       	cpi	r24, 0x47	; 71
	}
	else if (distance0<=70)
     51c:	91 05       	cpc	r25, r1
     51e:	b4 f5       	brge	.+108    	; 0x58c <Back_ultra_trigge+0xe4>
     520:	89 e6       	ldi	r24, 0x69	; 105
	{
		SPI_sendByte('i');
     522:	5f d5       	rcall	.+2750   	; 0xfe2 <SPI_sendByte>
     524:	9f e9       	ldi	r25, 0x9F	; 159
     526:	26 e8       	ldi	r18, 0x86	; 134
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	91 50       	subi	r25, 0x01	; 1
     52c:	20 40       	sbci	r18, 0x00	; 0
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <Back_ultra_trigge+0x82>
     532:	00 c0       	rjmp	.+0      	; 0x534 <Back_ultra_trigge+0x8c>
     534:	00 00       	nop
     536:	82 e6       	ldi	r24, 0x62	; 98
		_delay_ms(500);
		UART0_sendString("n,\n\r");
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	b2 d5       	rcall	.+2916   	; 0x10a0 <UART0_sendString>
     53c:	9f e3       	ldi	r25, 0x3F	; 63
     53e:	2d e0       	ldi	r18, 0x0D	; 13
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	91 50       	subi	r25, 0x01	; 1
     544:	20 40       	sbci	r18, 0x00	; 0
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <Back_ultra_trigge+0x9a>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <Back_ultra_trigge+0xa4>
     54c:	00 00       	nop
     54e:	82 e6       	ldi	r24, 0x62	; 98
		_delay_ms(1000);
		UART0_sendString("n,\n\r");
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	a6 d5       	rcall	.+2892   	; 0x10a0 <UART0_sendString>
     554:	9f e3       	ldi	r25, 0x3F	; 63
     556:	2d e0       	ldi	r18, 0x0D	; 13
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	91 50       	subi	r25, 0x01	; 1
     55c:	20 40       	sbci	r18, 0x00	; 0
     55e:	80 40       	sbci	r24, 0x00	; 0
     560:	e1 f7       	brne	.-8      	; 0x55a <Back_ultra_trigge+0xb2>
     562:	00 c0       	rjmp	.+0      	; 0x564 <Back_ultra_trigge+0xbc>
		_delay_ms(1000);
		UART0_sendString("v,");
     564:	00 00       	nop
     566:	8f e5       	ldi	r24, 0x5F	; 95
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	9a d5       	rcall	.+2868   	; 0x10a0 <UART0_sendString>
		UART0_sendString(distance_str0);
     56c:	ce 01       	movw	r24, r28
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	97 d5       	rcall	.+2862   	; 0x10a0 <UART0_sendString>
     572:	8b e3       	ldi	r24, 0x3B	; 59
		UART0_sendString(" Cm.\n\r");
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	94 d5       	rcall	.+2856   	; 0x10a0 <UART0_sendString>
     578:	9f ed       	ldi	r25, 0xDF	; 223
     57a:	23 e9       	ldi	r18, 0x93	; 147
     57c:	84 e0       	ldi	r24, 0x04	; 4
     57e:	91 50       	subi	r25, 0x01	; 1
     580:	20 40       	sbci	r18, 0x00	; 0
     582:	80 40       	sbci	r24, 0x00	; 0
     584:	e1 f7       	brne	.-8      	; 0x57e <Back_ultra_trigge+0xd6>
     586:	00 c0       	rjmp	.+0      	; 0x588 <Back_ultra_trigge+0xe0>
     588:	00 00       	nop
     58a:	06 c0       	rjmp	.+12     	; 0x598 <Back_ultra_trigge+0xf0>
		_delay_ms(1500);
	}
	else
	{
		UART0_sendString("p\n\r");
     58c:	81 e2       	ldi	r24, 0x21	; 33
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	87 d5       	rcall	.+2830   	; 0x10a0 <UART0_sendString>
     592:	81 e2       	ldi	r24, 0x21	; 33
		UART0_sendString("p\n\r");
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	84 d5       	rcall	.+2824   	; 0x10a0 <UART0_sendString>
     598:	2a 96       	adiw	r28, 0x0a	; 10
     59a:	0f b6       	in	r0, 0x3f	; 63
	}
}
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <Smoke_check>:
     5aa:	02 99       	sbic	0x00, 2	; 0
     5ac:	3f c0       	rjmp	.+126    	; 0x62c <Smoke_check+0x82>

void Smoke_check()
{
	if (readbit(PINA,2)==0)
	{
		SPI_sendByte('i');
     5ae:	89 e6       	ldi	r24, 0x69	; 105
     5b0:	18 d5       	rcall	.+2608   	; 0xfe2 <SPI_sendByte>
     5b2:	2f e9       	ldi	r18, 0x9F	; 159
     5b4:	86 e8       	ldi	r24, 0x86	; 134
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	80 40       	sbci	r24, 0x00	; 0
     5bc:	90 40       	sbci	r25, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <Smoke_check+0xe>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <Smoke_check+0x18>
     5c2:	00 00       	nop
		_delay_ms(500);
		UART0_sendString("y,yes\n\r");
     5c4:	87 e6       	ldi	r24, 0x67	; 103
     5c6:	92 e0       	ldi	r25, 0x02	; 2
     5c8:	6b d5       	rcall	.+2774   	; 0x10a0 <UART0_sendString>
     5ca:	2f e3       	ldi	r18, 0x3F	; 63
     5cc:	8d e0       	ldi	r24, 0x0D	; 13
     5ce:	93 e0       	ldi	r25, 0x03	; 3
     5d0:	21 50       	subi	r18, 0x01	; 1
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	90 40       	sbci	r25, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <Smoke_check+0x26>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <Smoke_check+0x30>
     5da:	00 00       	nop
		_delay_ms(1000);
		UART0_sendString("t,Smoke Detected\n\r");
     5dc:	8f e6       	ldi	r24, 0x6F	; 111
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	5f d5       	rcall	.+2750   	; 0x10a0 <UART0_sendString>
		status='0';
     5e2:	80 e3       	ldi	r24, 0x30	; 48
		Accident_Detect();/***********acident check*************/
     5e4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
		drowsy_smoke_alcohol_message();/************send message************/
     5e8:	00 de       	rcall	.-1024   	; 0x1ea <Accident_Detect>
		while (readbit(PINA,2)==0)
     5ea:	f7 d2       	rcall	.+1518   	; 0xbda <drowsy_smoke_alcohol_message>
		{
		Accident_Detect();/***********acident check*************/
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <Smoke_check+0x46>
		_delay_ms(1000);
		UART0_sendString("t,Smoke Detected\n\r");
		status='0';
		Accident_Detect();/***********acident check*************/
		drowsy_smoke_alcohol_message();/************send message************/
		while (readbit(PINA,2)==0)
     5ee:	fd dd       	rcall	.-1030   	; 0x1ea <Accident_Detect>
     5f0:	02 9b       	sbis	0x00, 2	; 0
		{
		Accident_Detect();/***********acident check*************/
		}
		UART0_sendString("y,no\n\r");
     5f2:	fd cf       	rjmp	.-6      	; 0x5ee <Smoke_check+0x44>
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	53 d5       	rcall	.+2726   	; 0x10a0 <UART0_sendString>
     5fa:	2f e3       	ldi	r18, 0x3F	; 63
     5fc:	8d e0       	ldi	r24, 0x0D	; 13
     5fe:	93 e0       	ldi	r25, 0x03	; 3
     600:	21 50       	subi	r18, 0x01	; 1
     602:	80 40       	sbci	r24, 0x00	; 0
     604:	90 40       	sbci	r25, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <Smoke_check+0x56>
		_delay_ms(1000);
		UART0_sendString("t,No Error\r");
     608:	00 c0       	rjmp	.+0      	; 0x60a <Smoke_check+0x60>
     60a:	00 00       	nop
     60c:	82 e8       	ldi	r24, 0x82	; 130
     60e:	92 e0       	ldi	r25, 0x02	; 2
		Accident_Detect();/***********acident check*************/
     610:	47 d5       	rcall	.+2702   	; 0x10a0 <UART0_sendString>
     612:	eb dd       	rcall	.-1066   	; 0x1ea <Accident_Detect>
     614:	2f e3       	ldi	r18, 0x3F	; 63
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	21 50       	subi	r18, 0x01	; 1
     61c:	80 40       	sbci	r24, 0x00	; 0
     61e:	90 40       	sbci	r25, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <Smoke_check+0x70>
     622:	00 c0       	rjmp	.+0      	; 0x624 <Smoke_check+0x7a>
     624:	00 00       	nop
		_delay_ms(1000);
		status='1';
     626:	81 e3       	ldi	r24, 0x31	; 49
     628:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
     62c:	08 95       	ret

0000062e <Drownis_check>:

/*****************************************************************************/

void Drownis_check()
{
	if (readbit(PINB,4)==1)
     62e:	1c 9b       	sbis	0x03, 4	; 3
     630:	2f c0       	rjmp	.+94     	; 0x690 <Drownis_check+0x62>
	{
		SPI_sendByte('i');
     632:	89 e6       	ldi	r24, 0x69	; 105
     634:	d6 d4       	rcall	.+2476   	; 0xfe2 <SPI_sendByte>
     636:	2f e9       	ldi	r18, 0x9F	; 159
     638:	86 e8       	ldi	r24, 0x86	; 134
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	21 50       	subi	r18, 0x01	; 1
     63e:	80 40       	sbci	r24, 0x00	; 0
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	e1 f7       	brne	.-8      	; 0x63c <Drownis_check+0xe>
     644:	00 c0       	rjmp	.+0      	; 0x646 <Drownis_check+0x18>
     646:	00 00       	nop
		_delay_ms(500);
		UART0_sendString("t,User is Sleepy\n\r");
     648:	8e e8       	ldi	r24, 0x8E	; 142
     64a:	92 e0       	ldi	r25, 0x02	; 2
     64c:	29 d5       	rcall	.+2642   	; 0x10a0 <UART0_sendString>
     64e:	2f eb       	ldi	r18, 0xBF	; 191
     650:	87 e2       	ldi	r24, 0x27	; 39
     652:	99 e0       	ldi	r25, 0x09	; 9
     654:	21 50       	subi	r18, 0x01	; 1
     656:	80 40       	sbci	r24, 0x00	; 0
     658:	90 40       	sbci	r25, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <Drownis_check+0x26>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <Drownis_check+0x30>
     65e:	00 00       	nop
		_delay_ms(3000);
		status='0';
     660:	80 e3       	ldi	r24, 0x30	; 48
     662:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
		drowsy_smoke_alcohol_message();/************send message************/
		while (readbit(PINB,4)==1)
     666:	b9 d2       	rcall	.+1394   	; 0xbda <drowsy_smoke_alcohol_message>
		{
			Accident_Detect();/***********acident check*************/
     668:	01 c0       	rjmp	.+2      	; 0x66c <Drownis_check+0x3e>
     66a:	bf dd       	rcall	.-1154   	; 0x1ea <Accident_Detect>
		_delay_ms(500);
		UART0_sendString("t,User is Sleepy\n\r");
		_delay_ms(3000);
		status='0';
		drowsy_smoke_alcohol_message();/************send message************/
		while (readbit(PINB,4)==1)
     66c:	1c 99       	sbic	0x03, 4	; 3
		{
			Accident_Detect();/***********acident check*************/
		}
		UART0_sendString("t,No Error\r");
     66e:	fd cf       	rjmp	.-6      	; 0x66a <Drownis_check+0x3c>
     670:	82 e8       	ldi	r24, 0x82	; 130
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	15 d5       	rcall	.+2602   	; 0x10a0 <UART0_sendString>
     676:	2f eb       	ldi	r18, 0xBF	; 191
     678:	87 e2       	ldi	r24, 0x27	; 39
     67a:	99 e0       	ldi	r25, 0x09	; 9
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <Drownis_check+0x4e>
     684:	00 c0       	rjmp	.+0      	; 0x686 <Drownis_check+0x58>
		_delay_ms(3000);
		status='1';
     686:	00 00       	nop
     688:	81 e3       	ldi	r24, 0x31	; 49
     68a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
		Accident_Detect();/***********acident check*************/
     68e:	ad cd       	rjmp	.-1190   	; 0x1ea <Accident_Detect>
     690:	08 95       	ret

00000692 <speed_check>:
	}
}
void speed_check()
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	2a 97       	sbiw	r28, 0x0a	; 10
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	unsigned char speed_str[10];
	int rx_speed;
	rx_speed=atoi(&receivedData);
     6a6:	8b e3       	ldi	r24, 0x3B	; 59
     6a8:	96 e0       	ldi	r25, 0x06	; 6
     6aa:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <atoi>
	if (rx_speed>0 && rx_speed<300)
     6ae:	9c 01       	movw	r18, r24
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	31 09       	sbc	r19, r1
     6b4:	2b 32       	cpi	r18, 0x2B	; 43
     6b6:	31 40       	sbci	r19, 0x01	; 1
     6b8:	20 f4       	brcc	.+8      	; 0x6c2 <speed_check+0x30>
	{
		speed=rx_speed;
     6ba:	90 93 21 06 	sts	0x0621, r25	; 0x800621 <speed+0x1>
     6be:	80 93 20 06 	sts	0x0620, r24	; 0x800620 <speed>
     6c2:	4a e0       	ldi	r20, 0x0A	; 10
     6c4:	be 01       	movw	r22, r28
     6c6:	6f 5f       	subi	r22, 0xFF	; 255
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	80 91 20 06 	lds	r24, 0x0620	; 0x800620 <speed>
     6ce:	90 91 21 06 	lds	r25, 0x0621	; 0x800621 <speed+0x1>
     6d2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__itoa_ncheck>
	}	
	itoa(speed,speed_str,10);
	UART0_sendString("s,");
     6d6:	81 ea       	ldi	r24, 0xA1	; 161
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	e2 d4       	rcall	.+2500   	; 0x10a0 <UART0_sendString>
	UART0_sendString(speed_str);
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	df d4       	rcall	.+2494   	; 0x10a0 <UART0_sendString>
	UART0_sendString("\n\r");
     6e2:	89 ef       	ldi	r24, 0xF9	; 249
     6e4:	93 e0       	ldi	r25, 0x03	; 3
     6e6:	dc d4       	rcall	.+2488   	; 0x10a0 <UART0_sendString>
}
     6e8:	2a 96       	adiw	r28, 0x0a	; 10
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <Application>:
	UART0_sendString("\n\r");
	_delay_ms(2000);
}

void Application()
{
     6fa:	cf 93       	push	r28
	char i;      //For GPS trials
	status='1';  //Car can move
     6fc:	81 e3       	ldi	r24, 0x31	; 49
     6fe:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <status>
	
	/************************ UltraSonic Check ***************************/
	if (car_status=='1')    //Car Move Backward
     702:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     706:	81 33       	cpi	r24, 0x31	; 49
     708:	11 f4       	brne	.+4      	; 0x70e <Application+0x14>
	{
		Back_ultra_trigge();
     70a:	ce de       	rcall	.-612    	; 0x4a8 <Back_ultra_trigge>
     70c:	03 c0       	rjmp	.+6      	; 0x714 <Application+0x1a>
	}
	else if (car_status=='2')   //Car Move Forward
     70e:	82 33       	cpi	r24, 0x32	; 50
	{
		Front_ultra_trigger();
     710:	09 f4       	brne	.+2      	; 0x714 <Application+0x1a>
     712:	ea dd       	rcall	.-1068   	; 0x2e8 <Front_ultra_trigger>
     714:	8f e2       	ldi	r24, 0x2F	; 47
     716:	95 e7       	ldi	r25, 0x75	; 117
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <Application+0x1e>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <Application+0x24>
	/********************************************************************/
	
	_delay_ms(120);
	
	/************************ Temperature check ***************************/
    Temp_read();
     71e:	00 00       	nop
     720:	67 dd       	rcall	.-1330   	; 0x1f0 <Temp_read>
     722:	8f e2       	ldi	r24, 0x2F	; 47
     724:	95 e7       	ldi	r25, 0x75	; 117
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <Application+0x2c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <Application+0x32>
	/********************************************************************/
	_delay_ms(120);
	/************************ Speed check ***************************/
    speed_check();
     72c:	00 00       	nop
     72e:	b1 df       	rcall	.-158    	; 0x692 <speed_check>
     730:	87 ea       	ldi	r24, 0xA7	; 167
     732:	91 e6       	ldi	r25, 0x61	; 97
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	f1 f7       	brne	.-4      	; 0x734 <Application+0x3a>
	/********************************************************************/
	_delay_ms(100);
	/*************************** Smoke Check ****************************/
    Smoke_check();
     738:	00 c0       	rjmp	.+0      	; 0x73a <Application+0x40>
     73a:	00 00       	nop
	/************************** Alcohol Check ***************************/
	Alcohol_check();
     73c:	36 df       	rcall	.-404    	; 0x5aa <Smoke_check>
	/************************** Drownis Check ***************************/
	Drownis_check();
     73e:	67 de       	rcall	.-818    	; 0x40e <Alcohol_check>
     740:	76 df       	rcall	.-276    	; 0x62e <Drownis_check>
	
	/************************ UltraSonic Check ***************************/
	if (car_status=='1')    //Car Move Backward
     742:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     746:	81 33       	cpi	r24, 0x31	; 49
	{
		Back_ultra_trigge();
     748:	11 f4       	brne	.+4      	; 0x74e <Application+0x54>
     74a:	ae de       	rcall	.-676    	; 0x4a8 <Back_ultra_trigge>
     74c:	03 c0       	rjmp	.+6      	; 0x754 <Application+0x5a>
	}
	else if (car_status=='2')   //Car Move Forward
     74e:	82 33       	cpi	r24, 0x32	; 50
     750:	09 f4       	brne	.+2      	; 0x754 <Application+0x5a>
	{
		Front_ultra_trigger();
     752:	ca dd       	rcall	.-1132   	; 0x2e8 <Front_ultra_trigger>
     754:	8f e2       	ldi	r24, 0x2F	; 47
     756:	95 e7       	ldi	r25, 0x75	; 117
     758:	01 97       	sbiw	r24, 0x01	; 1
     75a:	f1 f7       	brne	.-4      	; 0x758 <Application+0x5e>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <Application+0x64>
	/********************************************************************/
	
	_delay_ms(120);
	
	/************************* GPS Check ********************************/
	for(i=0;i<120;i++)
     75e:	00 00       	nop
     760:	c0 e0       	ldi	r28, 0x00	; 0
	{
		receive();
     762:	02 c0       	rjmp	.+4      	; 0x768 <Application+0x6e>
     764:	07 d3       	rcall	.+1550   	; 0xd74 <receive>
	/********************************************************************/
	
	_delay_ms(120);
	
	/************************* GPS Check ********************************/
	for(i=0;i<120;i++)
     766:	cf 5f       	subi	r28, 0xFF	; 255
     768:	c8 37       	cpi	r28, 0x78	; 120
     76a:	e0 f3       	brcs	.-8      	; 0x764 <Application+0x6a>
	{
		receive();
	}
	send_data();
     76c:	a5 d3       	rcall	.+1866   	; 0xeb8 <send_data>
     76e:	8f e2       	ldi	r24, 0x2F	; 47
     770:	95 e7       	ldi	r25, 0x75	; 117
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	f1 f7       	brne	.-4      	; 0x772 <Application+0x78>
     776:	00 c0       	rjmp	.+0      	; 0x778 <Application+0x7e>
	/*******************************************************************/
	
	_delay_ms(120);
	
	/************************ UltraSonic Check ***************************/
	if (car_status=='1')    //Car Move Backward
     778:	00 00       	nop
     77a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     77e:	81 33       	cpi	r24, 0x31	; 49
	{
		Back_ultra_trigge();
     780:	11 f4       	brne	.+4      	; 0x786 <Application+0x8c>
     782:	92 de       	rcall	.-732    	; 0x4a8 <Back_ultra_trigge>
     784:	03 c0       	rjmp	.+6      	; 0x78c <Application+0x92>
	}
	else if (car_status=='2')   //Car Move Forward
     786:	82 33       	cpi	r24, 0x32	; 50
     788:	09 f4       	brne	.+2      	; 0x78c <Application+0x92>
	{
		Front_ultra_trigger();
     78a:	ae dd       	rcall	.-1188   	; 0x2e8 <Front_ultra_trigger>
     78c:	8f e2       	ldi	r24, 0x2F	; 47
     78e:	95 e7       	ldi	r25, 0x75	; 117
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <Application+0x96>
     794:	00 c0       	rjmp	.+0      	; 0x796 <Application+0x9c>
     796:	00 00       	nop
     798:	cf 91       	pop	r28
	/********************************************************************/
	
	_delay_ms(120);
	
	/********************************************************************/
}
     79a:	08 95       	ret

0000079c <__vector_25>:
     79c:	1f 92       	push	r1
	UART0_sendString("\n\r");
}

/****************************************************************************/
ISR(USART0_RX_vect)
{
     79e:	0f 92       	push	r0
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	0f 92       	push	r0
     7a4:	11 24       	eor	r1, r1
     7a6:	0b b6       	in	r0, 0x3b	; 59
     7a8:	0f 92       	push	r0
     7aa:	2f 93       	push	r18
     7ac:	3f 93       	push	r19
     7ae:	4f 93       	push	r20
     7b0:	5f 93       	push	r21
     7b2:	6f 93       	push	r22
     7b4:	7f 93       	push	r23
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	af 93       	push	r26
     7bc:	bf 93       	push	r27
     7be:	ef 93       	push	r30
     7c0:	ff 93       	push	r31
	unsigned char rxdata='0';
	rxdata=UDR0;
     7c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	if (rxdata == '\n' || rxdata == '\r' || rxdata=='#')  // Check if the received character is a newline or carriage return (end of the number)
     7c6:	8a 30       	cpi	r24, 0x0A	; 10
     7c8:	21 f0       	breq	.+8      	; 0x7d2 <__vector_25+0x36>
     7ca:	8d 30       	cpi	r24, 0x0D	; 13
     7cc:	11 f0       	breq	.+4      	; 0x7d2 <__vector_25+0x36>
     7ce:	83 32       	cpi	r24, 0x23	; 35
     7d0:	61 f4       	brne	.+24     	; 0x7ea <__vector_25+0x4e>
	{
		receivedData[dataIndex] = '\0'; // Null-terminate the received data
     7d2:	e0 91 1e 06 	lds	r30, 0x061E	; 0x80061e <__data_end>
     7d6:	f0 91 1f 06 	lds	r31, 0x061F	; 0x80061f <__data_end+0x1>
     7da:	e5 5c       	subi	r30, 0xC5	; 197
     7dc:	f9 4f       	sbci	r31, 0xF9	; 249
     7de:	10 82       	st	Z, r1
		dataIndex = 0; // Reset the index for the next number
     7e0:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <__data_end+0x1>
     7e4:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__data_end>
     7e8:	0f c0       	rjmp	.+30     	; 0x808 <__vector_25+0x6c>
	}
	else
	{
		receivedData[dataIndex++] = rxdata;
     7ea:	20 91 1e 06 	lds	r18, 0x061E	; 0x80061e <__data_end>
     7ee:	30 91 1f 06 	lds	r19, 0x061F	; 0x80061f <__data_end+0x1>
     7f2:	a9 01       	movw	r20, r18
     7f4:	4f 5f       	subi	r20, 0xFF	; 255
     7f6:	5f 4f       	sbci	r21, 0xFF	; 255
     7f8:	50 93 1f 06 	sts	0x061F, r21	; 0x80061f <__data_end+0x1>
     7fc:	40 93 1e 06 	sts	0x061E, r20	; 0x80061e <__data_end>
     800:	f9 01       	movw	r30, r18
     802:	e5 5c       	subi	r30, 0xC5	; 197
     804:	f9 4f       	sbci	r31, 0xF9	; 249
     806:	80 83       	st	Z, r24
		rxdata='0';
	}
	if (!(strcmp(receivedData,"c")) && status=='1')
     808:	64 ea       	ldi	r22, 0xA4	; 164
     80a:	72 e0       	ldi	r23, 0x02	; 2
     80c:	8b e3       	ldi	r24, 0x3B	; 59
     80e:	96 e0       	ldi	r25, 0x06	; 6
     810:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     814:	89 2b       	or	r24, r25
     816:	a9 f4       	brne	.+42     	; 0x842 <__vector_25+0xa6>
     818:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     81c:	81 33       	cpi	r24, 0x31	; 49
     81e:	89 f4       	brne	.+34     	; 0x842 <__vector_25+0xa6>
	{
		SPI_sendByte('i');
     820:	89 e6       	ldi	r24, 0x69	; 105
     822:	df d3       	rcall	.+1982   	; 0xfe2 <SPI_sendByte>
     824:	2f ed       	ldi	r18, 0xDF	; 223
     826:	83 e9       	ldi	r24, 0x93	; 147
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	80 40       	sbci	r24, 0x00	; 0
     82e:	90 40       	sbci	r25, 0x00	; 0
     830:	e1 f7       	brne	.-8      	; 0x82a <__vector_25+0x8e>
     832:	00 c0       	rjmp	.+0      	; 0x834 <__vector_25+0x98>
     834:	00 00       	nop
		_delay_ms(1500);
		SPI_sendByte('z');
     836:	8a e7       	ldi	r24, 0x7A	; 122
     838:	d4 d3       	rcall	.+1960   	; 0xfe2 <SPI_sendByte>
		car_status='1';
     83a:	81 e3       	ldi	r24, 0x31	; 49
     83c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     840:	d8 c0       	rjmp	.+432    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"h")) && status=='1')
     842:	66 ea       	ldi	r22, 0xA6	; 166
     844:	72 e0       	ldi	r23, 0x02	; 2
     846:	8b e3       	ldi	r24, 0x3B	; 59
     848:	96 e0       	ldi	r25, 0x06	; 6
     84a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     84e:	89 2b       	or	r24, r25
     850:	39 f4       	brne	.+14     	; 0x860 <__vector_25+0xc4>
     852:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     856:	81 33       	cpi	r24, 0x31	; 49
	{
		SPI_sendByte('h');
     858:	19 f4       	brne	.+6      	; 0x860 <__vector_25+0xc4>
     85a:	88 e6       	ldi	r24, 0x68	; 104
     85c:	c2 d3       	rcall	.+1924   	; 0xfe2 <SPI_sendByte>
     85e:	c9 c0       	rjmp	.+402    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"g")) && status=='1')
     860:	68 ea       	ldi	r22, 0xA8	; 168
     862:	72 e0       	ldi	r23, 0x02	; 2
     864:	8b e3       	ldi	r24, 0x3B	; 59
     866:	96 e0       	ldi	r25, 0x06	; 6
     868:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     86c:	89 2b       	or	r24, r25
     86e:	39 f4       	brne	.+14     	; 0x87e <__vector_25+0xe2>
     870:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     874:	81 33       	cpi	r24, 0x31	; 49
	{
		SPI_sendByte('g');
     876:	19 f4       	brne	.+6      	; 0x87e <__vector_25+0xe2>
     878:	87 e6       	ldi	r24, 0x67	; 103
     87a:	b3 d3       	rcall	.+1894   	; 0xfe2 <SPI_sendByte>
     87c:	ba c0       	rjmp	.+372    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"f")) && status=='1')
     87e:	63 ec       	ldi	r22, 0xC3	; 195
     880:	74 e0       	ldi	r23, 0x04	; 4
     882:	8b e3       	ldi	r24, 0x3B	; 59
     884:	96 e0       	ldi	r25, 0x06	; 6
     886:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     88a:	89 2b       	or	r24, r25
     88c:	a9 f4       	brne	.+42     	; 0x8b8 <__vector_25+0x11c>
     88e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     892:	81 33       	cpi	r24, 0x31	; 49
	{
		SPI_sendByte('i');
     894:	89 f4       	brne	.+34     	; 0x8b8 <__vector_25+0x11c>
     896:	89 e6       	ldi	r24, 0x69	; 105
     898:	a4 d3       	rcall	.+1864   	; 0xfe2 <SPI_sendByte>
     89a:	2f ed       	ldi	r18, 0xDF	; 223
     89c:	83 e9       	ldi	r24, 0x93	; 147
     89e:	94 e0       	ldi	r25, 0x04	; 4
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	80 40       	sbci	r24, 0x00	; 0
     8a4:	90 40       	sbci	r25, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <__vector_25+0x104>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <__vector_25+0x10e>
		_delay_ms(1500);
		SPI_sendByte('f');
     8aa:	00 00       	nop
     8ac:	86 e6       	ldi	r24, 0x66	; 102
     8ae:	99 d3       	rcall	.+1842   	; 0xfe2 <SPI_sendByte>
		car_status='2';
     8b0:	82 e3       	ldi	r24, 0x32	; 50
     8b2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     8b6:	9d c0       	rjmp	.+314    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"i")))
     8b8:	6a ea       	ldi	r22, 0xAA	; 170
     8ba:	72 e0       	ldi	r23, 0x02	; 2
     8bc:	8b e3       	ldi	r24, 0x3B	; 59
     8be:	96 e0       	ldi	r25, 0x06	; 6
     8c0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     8c4:	89 2b       	or	r24, r25
	{
		SPI_sendByte('i');
     8c6:	19 f4       	brne	.+6      	; 0x8ce <__vector_25+0x132>
     8c8:	89 e6       	ldi	r24, 0x69	; 105
     8ca:	8b d3       	rcall	.+1814   	; 0xfe2 <SPI_sendByte>
     8cc:	92 c0       	rjmp	.+292    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"a")) && status=='1')
     8ce:	6d e9       	ldi	r22, 0x9D	; 157
     8d0:	75 e0       	ldi	r23, 0x05	; 5
     8d2:	8b e3       	ldi	r24, 0x3B	; 59
     8d4:	96 e0       	ldi	r25, 0x06	; 6
     8d6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     8da:	89 2b       	or	r24, r25
     8dc:	a9 f4       	brne	.+42     	; 0x908 <__vector_25+0x16c>
     8de:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     8e2:	81 33       	cpi	r24, 0x31	; 49
	{
		SPI_sendByte('i');
     8e4:	89 f4       	brne	.+34     	; 0x908 <__vector_25+0x16c>
     8e6:	89 e6       	ldi	r24, 0x69	; 105
     8e8:	7c d3       	rcall	.+1784   	; 0xfe2 <SPI_sendByte>
     8ea:	2f ef       	ldi	r18, 0xFF	; 255
     8ec:	80 e7       	ldi	r24, 0x70	; 112
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	21 50       	subi	r18, 0x01	; 1
     8f2:	80 40       	sbci	r24, 0x00	; 0
     8f4:	90 40       	sbci	r25, 0x00	; 0
     8f6:	e1 f7       	brne	.-8      	; 0x8f0 <__vector_25+0x154>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <__vector_25+0x15e>
		_delay_ms(800);
		SPI_sendByte('x');
     8fa:	00 00       	nop
     8fc:	88 e7       	ldi	r24, 0x78	; 120
     8fe:	71 d3       	rcall	.+1762   	; 0xfe2 <SPI_sendByte>
		car_status='1';
     900:	81 e3       	ldi	r24, 0x31	; 49
     902:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     906:	75 c0       	rjmp	.+234    	; 0x9f2 <__vector_25+0x256>
		
	}
	else if (!(strcmp(receivedData,"b")) && status=='1')
     908:	6c ea       	ldi	r22, 0xAC	; 172
     90a:	72 e0       	ldi	r23, 0x02	; 2
     90c:	8b e3       	ldi	r24, 0x3B	; 59
     90e:	96 e0       	ldi	r25, 0x06	; 6
     910:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     914:	89 2b       	or	r24, r25
     916:	99 f4       	brne	.+38     	; 0x93e <__vector_25+0x1a2>
     918:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     91c:	81 33       	cpi	r24, 0x31	; 49
     91e:	79 f4       	brne	.+30     	; 0x93e <__vector_25+0x1a2>
     920:	2f e3       	ldi	r18, 0x3F	; 63
     922:	8d e0       	ldi	r24, 0x0D	; 13
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	21 50       	subi	r18, 0x01	; 1
     928:	80 40       	sbci	r24, 0x00	; 0
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__vector_25+0x18a>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__vector_25+0x194>
	{
		_delay_ms(1000);
		SPI_sendByte('y');
     930:	00 00       	nop
     932:	89 e7       	ldi	r24, 0x79	; 121
     934:	56 d3       	rcall	.+1708   	; 0xfe2 <SPI_sendByte>
		car_status='1';
     936:	81 e3       	ldi	r24, 0x31	; 49
     938:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     93c:	5a c0       	rjmp	.+180    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"d")) && status=='1')
     93e:	66 e4       	ldi	r22, 0x46	; 70
     940:	75 e0       	ldi	r23, 0x05	; 5
     942:	8b e3       	ldi	r24, 0x3B	; 59
     944:	96 e0       	ldi	r25, 0x06	; 6
     946:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     94a:	89 2b       	or	r24, r25
     94c:	a9 f4       	brne	.+42     	; 0x978 <__vector_25+0x1dc>
     94e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     952:	81 33       	cpi	r24, 0x31	; 49
	{
		SPI_sendByte('i');
     954:	89 f4       	brne	.+34     	; 0x978 <__vector_25+0x1dc>
     956:	89 e6       	ldi	r24, 0x69	; 105
     958:	44 d3       	rcall	.+1672   	; 0xfe2 <SPI_sendByte>
     95a:	2f ef       	ldi	r18, 0xFF	; 255
     95c:	80 e7       	ldi	r24, 0x70	; 112
     95e:	92 e0       	ldi	r25, 0x02	; 2
     960:	21 50       	subi	r18, 0x01	; 1
     962:	80 40       	sbci	r24, 0x00	; 0
     964:	90 40       	sbci	r25, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <__vector_25+0x1c4>
     968:	00 c0       	rjmp	.+0      	; 0x96a <__vector_25+0x1ce>
		_delay_ms(800);
		SPI_sendByte('d');			
     96a:	00 00       	nop
     96c:	84 e6       	ldi	r24, 0x64	; 100
     96e:	39 d3       	rcall	.+1650   	; 0xfe2 <SPI_sendByte>
		car_status='2';
     970:	82 e3       	ldi	r24, 0x32	; 50
     972:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
     976:	3d c0       	rjmp	.+122    	; 0x9f2 <__vector_25+0x256>
	}
	else if (!(strcmp(receivedData,"e")) && status=='1')
     978:	6d e6       	ldi	r22, 0x6D	; 109
     97a:	75 e0       	ldi	r23, 0x05	; 5
     97c:	8b e3       	ldi	r24, 0x3B	; 59
     97e:	96 e0       	ldi	r25, 0x06	; 6
     980:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     984:	89 2b       	or	r24, r25
     986:	a9 f4       	brne	.+42     	; 0x9b2 <__vector_25+0x216>
     988:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <status>
     98c:	81 33       	cpi	r24, 0x31	; 49
	{
		SPI_sendByte('i');
     98e:	89 f4       	brne	.+34     	; 0x9b2 <__vector_25+0x216>
     990:	89 e6       	ldi	r24, 0x69	; 105
     992:	27 d3       	rcall	.+1614   	; 0xfe2 <SPI_sendByte>
     994:	2f e3       	ldi	r18, 0x3F	; 63
     996:	8d e0       	ldi	r24, 0x0D	; 13
     998:	93 e0       	ldi	r25, 0x03	; 3
     99a:	21 50       	subi	r18, 0x01	; 1
     99c:	80 40       	sbci	r24, 0x00	; 0
     99e:	90 40       	sbci	r25, 0x00	; 0
     9a0:	e1 f7       	brne	.-8      	; 0x99a <__vector_25+0x1fe>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <__vector_25+0x208>
		_delay_ms(1000);
		SPI_sendByte('e');
     9a4:	00 00       	nop
     9a6:	85 e6       	ldi	r24, 0x65	; 101
		car_status='2';
     9a8:	1c d3       	rcall	.+1592   	; 0xfe2 <SPI_sendByte>
     9aa:	82 e3       	ldi	r24, 0x32	; 50
     9ac:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	else if (!(strcmp(receivedData,"r")))
     9b0:	20 c0       	rjmp	.+64     	; 0x9f2 <__vector_25+0x256>
     9b2:	6e ea       	ldi	r22, 0xAE	; 174
     9b4:	72 e0       	ldi	r23, 0x02	; 2
     9b6:	8b e3       	ldi	r24, 0x3B	; 59
     9b8:	96 e0       	ldi	r25, 0x06	; 6
	{
		if (Interupt_raspi_check()==1)
     9ba:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <strcmp>
     9be:	89 2b       	or	r24, r25
		{
			UART0_sendString("r\n\r");
     9c0:	c1 f4       	brne	.+48     	; 0x9f2 <__vector_25+0x256>
     9c2:	a6 d5       	rcall	.+2892   	; 0x1510 <Interupt_raspi_check>
     9c4:	88 23       	and	r24, r24
     9c6:	a9 f0       	breq	.+42     	; 0x9f2 <__vector_25+0x256>
			UART0_sendString("r\n\r");
     9c8:	8e e2       	ldi	r24, 0x2E	; 46
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	69 d3       	rcall	.+1746   	; 0x10a0 <UART0_sendString>
     9ce:	8e e2       	ldi	r24, 0x2E	; 46
			UART0_sendString("r\n\r");
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	66 d3       	rcall	.+1740   	; 0x10a0 <UART0_sendString>
     9d4:	8e e2       	ldi	r24, 0x2E	; 46
     9d6:	92 e0       	ldi	r25, 0x02	; 2
			UART0_sendString("r\n\r");
     9d8:	63 d3       	rcall	.+1734   	; 0x10a0 <UART0_sendString>
     9da:	8e e2       	ldi	r24, 0x2E	; 46
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	60 d3       	rcall	.+1728   	; 0x10a0 <UART0_sendString>
     9e0:	2f e7       	ldi	r18, 0x7F	; 127
     9e2:	8a e1       	ldi	r24, 0x1A	; 26
     9e4:	96 e0       	ldi	r25, 0x06	; 6
     9e6:	21 50       	subi	r18, 0x01	; 1
     9e8:	80 40       	sbci	r24, 0x00	; 0
     9ea:	90 40       	sbci	r25, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <__vector_25+0x24a>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__vector_25+0x254>
     9f0:	00 00       	nop
			_delay_ms(2000);
		}
	}
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0b be       	out	0x3b, r0	; 59
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <__vector_54>:
ISR(USART3_RX_vect)
{
     a18:	1f 92       	push	r1
     a1a:	0f 92       	push	r0
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	0f 92       	push	r0
     a20:	11 24       	eor	r1, r1
     a22:	0b b6       	in	r0, 0x3b	; 59
     a24:	0f 92       	push	r0
     a26:	2f 93       	push	r18
     a28:	3f 93       	push	r19
     a2a:	4f 93       	push	r20
     a2c:	5f 93       	push	r21
     a2e:	8f 93       	push	r24
     a30:	ef 93       	push	r30
     a32:	ff 93       	push	r31
	unsigned char rxdata='0';
	rxdata=UDR3;
     a34:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
	if (rxdata == '\n' || rxdata == '\r' || rxdata=='#')  // Check if the received character is a newline or carriage return (end of the number)
     a38:	8a 30       	cpi	r24, 0x0A	; 10
     a3a:	21 f0       	breq	.+8      	; 0xa44 <__vector_54+0x2c>
     a3c:	8d 30       	cpi	r24, 0x0D	; 13
     a3e:	11 f0       	breq	.+4      	; 0xa44 <__vector_54+0x2c>
     a40:	83 32       	cpi	r24, 0x23	; 35
     a42:	61 f4       	brne	.+24     	; 0xa5c <__vector_54+0x44>
	{
		raspberryData[dataIndex] = '\0'; // Null-terminate the received data
     a44:	e0 91 1e 06 	lds	r30, 0x061E	; 0x80061e <__data_end>
     a48:	f0 91 1f 06 	lds	r31, 0x061F	; 0x80061f <__data_end+0x1>
     a4c:	ef 5c       	subi	r30, 0xCF	; 207
     a4e:	f9 4f       	sbci	r31, 0xF9	; 249
     a50:	10 82       	st	Z, r1
		dataIndex = 0;
     a52:	10 92 1f 06 	sts	0x061F, r1	; 0x80061f <__data_end+0x1>
     a56:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__data_end>
     a5a:	0f c0       	rjmp	.+30     	; 0xa7a <__vector_54+0x62>
	}
	else
	{
		raspberryData[dataIndex++] = rxdata;
     a5c:	20 91 1e 06 	lds	r18, 0x061E	; 0x80061e <__data_end>
     a60:	30 91 1f 06 	lds	r19, 0x061F	; 0x80061f <__data_end+0x1>
     a64:	a9 01       	movw	r20, r18
     a66:	4f 5f       	subi	r20, 0xFF	; 255
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	50 93 1f 06 	sts	0x061F, r21	; 0x80061f <__data_end+0x1>
     a6e:	40 93 1e 06 	sts	0x061E, r20	; 0x80061e <__data_end>
     a72:	f9 01       	movw	r30, r18
     a74:	ef 5c       	subi	r30, 0xCF	; 207
     a76:	f9 4f       	sbci	r31, 0xF9	; 249
     a78:	80 83       	st	Z, r24
		rxdata='0';
	}
     a7a:	ff 91       	pop	r31
     a7c:	ef 91       	pop	r30
     a7e:	8f 91       	pop	r24
     a80:	5f 91       	pop	r21
     a82:	4f 91       	pop	r20
     a84:	3f 91       	pop	r19
     a86:	2f 91       	pop	r18
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <Car_Init>:
#include "CarMove.h"

void Car_Init()
{
    setbit(DDRA,0);	
     a96:	81 b1       	in	r24, 0x01	; 1
     a98:	81 60       	ori	r24, 0x01	; 1
     a9a:	81 b9       	out	0x01, r24	; 1
	setbit(DDRA,4);
     a9c:	81 b1       	in	r24, 0x01	; 1
     a9e:	80 61       	ori	r24, 0x10	; 16
     aa0:	81 b9       	out	0x01, r24	; 1
    setbit(DDRA,1);
     aa2:	81 b1       	in	r24, 0x01	; 1
     aa4:	82 60       	ori	r24, 0x02	; 2
     aa6:	81 b9       	out	0x01, r24	; 1
	setbit(DDRA,5);
     aa8:	81 b1       	in	r24, 0x01	; 1
     aaa:	80 62       	ori	r24, 0x20	; 32
     aac:	81 b9       	out	0x01, r24	; 1
    setbit(DDRB,5);
     aae:	84 b1       	in	r24, 0x04	; 4
     ab0:	80 62       	ori	r24, 0x20	; 32
     ab2:	84 b9       	out	0x04, r24	; 4
    setbit(DDRE,3);
     ab4:	8d b1       	in	r24, 0x0d	; 13
     ab6:	88 60       	ori	r24, 0x08	; 8
     ab8:	8d b9       	out	0x0d, r24	; 13
     aba:	08 95       	ret

00000abc <gsm_init>:
bool smoke=false;
bool alcohol=false;

void gsm_init()
{
	UART2_init();
     abc:	cc c2       	rjmp	.+1432   	; 0x1056 <UART2_init>
     abe:	08 95       	ret

00000ac0 <gsm_send_accident_message>:
}

void gsm_send_accident_message()
{
	if (readbit(PINB,4)==1)
     ac0:	1c 9b       	sbis	0x03, 4	; 3
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <gsm_send_accident_message+0xc>
	{
		drown=true;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <drown>
     aca:	03 c0       	rjmp	.+6      	; 0xad2 <gsm_send_accident_message+0x12>
	}
	else if(readbit(PINB,4)==0)
     acc:	1c 9b       	sbis	0x03, 4	; 3
	{
		drown=false;
     ace:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <drown>
	}
	if (readbit(PINA,2)==0)
     ad2:	02 99       	sbic	0x00, 2	; 0
     ad4:	04 c0       	rjmp	.+8      	; 0xade <gsm_send_accident_message+0x1e>
	{
		smoke=true;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <smoke>
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <gsm_send_accident_message+0x24>
	}
	else if(readbit(PINA,2)==1)
     ade:	02 99       	sbic	0x00, 2	; 0
	{
		smoke=false;
     ae0:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <smoke>
	}
	if (readbit(PINA,3)==0)
     ae4:	03 99       	sbic	0x00, 3	; 0
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <gsm_send_accident_message+0x30>
	{
		alcohol=true;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <alcohol>
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <gsm_send_accident_message+0x36>
	}
	else if(readbit(PINA,3)==1)
     af0:	03 99       	sbic	0x00, 3	; 0
	{
		alcohol=false;
     af2:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <alcohol>
	}
	UART2_sendString("AT\n\r");
     af6:	80 eb       	ldi	r24, 0xB0	; 176
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	f2 d2       	rcall	.+1508   	; 0x10e0 <UART2_sendString>
     afc:	2f e3       	ldi	r18, 0x3F	; 63
     afe:	8d e0       	ldi	r24, 0x0D	; 13
     b00:	93 e0       	ldi	r25, 0x03	; 3
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <gsm_send_accident_message+0x42>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <gsm_send_accident_message+0x4c>
     b0c:	00 00       	nop
	_delay_ms(1000);
	UART2_sendString("AT+CREG?\n\r");
     b0e:	85 eb       	ldi	r24, 0xB5	; 181
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	e6 d2       	rcall	.+1484   	; 0x10e0 <UART2_sendString>
     b14:	2f e3       	ldi	r18, 0x3F	; 63
     b16:	8d e0       	ldi	r24, 0x0D	; 13
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	21 50       	subi	r18, 0x01	; 1
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	90 40       	sbci	r25, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <gsm_send_accident_message+0x5a>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <gsm_send_accident_message+0x64>
     b24:	00 00       	nop
	_delay_ms(1000);
	UART2_sendString("AT+CMGF=1\n\r");
     b26:	80 ec       	ldi	r24, 0xC0	; 192
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	da d2       	rcall	.+1460   	; 0x10e0 <UART2_sendString>
     b2c:	2f e3       	ldi	r18, 0x3F	; 63
     b2e:	8d e0       	ldi	r24, 0x0D	; 13
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	21 50       	subi	r18, 0x01	; 1
     b34:	80 40       	sbci	r24, 0x00	; 0
     b36:	90 40       	sbci	r25, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <gsm_send_accident_message+0x72>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <gsm_send_accident_message+0x7c>
	_delay_ms(1000);
	UART2_sendString("AT+CMGS=\"+201013982361\"\n\r");
     b3c:	00 00       	nop
     b3e:	8c ec       	ldi	r24, 0xCC	; 204
     b40:	92 e0       	ldi	r25, 0x02	; 2
     b42:	ce d2       	rcall	.+1436   	; 0x10e0 <UART2_sendString>
     b44:	2f e3       	ldi	r18, 0x3F	; 63
     b46:	8d e0       	ldi	r24, 0x0D	; 13
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	80 40       	sbci	r24, 0x00	; 0
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	e1 f7       	brne	.-8      	; 0xb4a <gsm_send_accident_message+0x8a>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <gsm_send_accident_message+0x94>
	_delay_ms(1000);
	/********************message**************************/
	UART2_sendString("Accident occur to car 5748 and that is its condition\n\r");
     b54:	00 00       	nop
     b56:	86 ee       	ldi	r24, 0xE6	; 230
     b58:	92 e0       	ldi	r25, 0x02	; 2
     b5a:	c2 d2       	rcall	.+1412   	; 0x10e0 <UART2_sendString>
	if (smoke==true)
     b5c:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <smoke>
     b60:	88 23       	and	r24, r24
	{
		UART2_sendString("smoke detected\n\r");
     b62:	21 f0       	breq	.+8      	; 0xb6c <gsm_send_accident_message+0xac>
     b64:	8d e1       	ldi	r24, 0x1D	; 29
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	bb d2       	rcall	.+1398   	; 0x10e0 <UART2_sendString>
	}
	else
	{
		UART2_sendString("smoke not detected\n\r");
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <gsm_send_accident_message+0xb2>
     b6c:	8e e2       	ldi	r24, 0x2E	; 46
     b6e:	93 e0       	ldi	r25, 0x03	; 3
	}
	if (alcohol==true)
     b70:	b7 d2       	rcall	.+1390   	; 0x10e0 <UART2_sendString>
     b72:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <alcohol>
	{
		UART2_sendString("alcohol detected\n\r");
     b76:	88 23       	and	r24, r24
     b78:	21 f0       	breq	.+8      	; 0xb82 <gsm_send_accident_message+0xc2>
     b7a:	83 e4       	ldi	r24, 0x43	; 67
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	b0 d2       	rcall	.+1376   	; 0x10e0 <UART2_sendString>
	}
	else
	{
		UART2_sendString("alcohol not detected\n\r");
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <gsm_send_accident_message+0xc8>
     b82:	86 e5       	ldi	r24, 0x56	; 86
     b84:	93 e0       	ldi	r25, 0x03	; 3
	}
	if (drown==true)
     b86:	ac d2       	rcall	.+1368   	; 0x10e0 <UART2_sendString>
     b88:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <drown>
	{
		UART2_sendString("drown detected\n\r");
     b8c:	88 23       	and	r24, r24
     b8e:	21 f0       	breq	.+8      	; 0xb98 <gsm_send_accident_message+0xd8>
     b90:	8d e6       	ldi	r24, 0x6D	; 109
	}
	else
	{
		UART2_sendString("drown not detected\n\r");
     b92:	93 e0       	ldi	r25, 0x03	; 3
     b94:	a5 d2       	rcall	.+1354   	; 0x10e0 <UART2_sendString>
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <gsm_send_accident_message+0xde>
     b98:	8e e7       	ldi	r24, 0x7E	; 126
	}
	UART2_sendString("Car Location is : \n");
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	a1 d2       	rcall	.+1346   	; 0x10e0 <UART2_sendString>
     b9e:	83 e9       	ldi	r24, 0x93	; 147
     ba0:	93 e0       	ldi	r25, 0x03	; 3
	gps_send_sms_data();
     ba2:	9e d2       	rcall	.+1340   	; 0x10e0 <UART2_sendString>
     ba4:	c1 d1       	rcall	.+898    	; 0xf28 <gps_send_sms_data>
     ba6:	2f e3       	ldi	r18, 0x3F	; 63
     ba8:	8d e0       	ldi	r24, 0x0D	; 13
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	21 50       	subi	r18, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <gsm_send_accident_message+0xec>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <gsm_send_accident_message+0xf6>
     bb6:	00 00       	nop
	/*****************************************************/
	_delay_ms(1000);
	while(BIT_IS_CLEAR(UCSR2A,UDRE2))
     bb8:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
     bbc:	85 ff       	sbrs	r24, 5
     bbe:	fc cf       	rjmp	.-8      	; 0xbb8 <gsm_send_accident_message+0xf8>
	{
		;
	}
	UDR2 = 0x1A;
     bc0:	8a e1       	ldi	r24, 0x1A	; 26
     bc2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     bc6:	2f e7       	ldi	r18, 0x7F	; 127
     bc8:	84 e8       	ldi	r24, 0x84	; 132
     bca:	9e e1       	ldi	r25, 0x1E	; 30
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	80 40       	sbci	r24, 0x00	; 0
     bd0:	90 40       	sbci	r25, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <gsm_send_accident_message+0x10c>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <gsm_send_accident_message+0x116>
     bd6:	00 00       	nop
     bd8:	08 95       	ret

00000bda <drowsy_smoke_alcohol_message>:
	_delay_ms(10000);
}
void drowsy_smoke_alcohol_message()
{
	if (readbit(PINB,4)==1)
     bda:	1c 9b       	sbis	0x03, 4	; 3
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <drowsy_smoke_alcohol_message+0xc>
	{
		drown=true;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <drown>
     be4:	03 c0       	rjmp	.+6      	; 0xbec <drowsy_smoke_alcohol_message+0x12>
	}
	else if(readbit(PINB,4)==0)
     be6:	1c 9b       	sbis	0x03, 4	; 3
	{
		drown=false;
     be8:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <drown>
	}
	if (readbit(PINA,2)==0)
     bec:	02 99       	sbic	0x00, 2	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <drowsy_smoke_alcohol_message+0x1e>
	{
		smoke=true;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <smoke>
     bf6:	03 c0       	rjmp	.+6      	; 0xbfe <drowsy_smoke_alcohol_message+0x24>
	}
	else if(readbit(PINA,2)==1)
     bf8:	02 99       	sbic	0x00, 2	; 0
	{
		smoke=false;
     bfa:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <smoke>
	}
	if (readbit(PINA,3)==0)
     bfe:	03 99       	sbic	0x00, 3	; 0
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <drowsy_smoke_alcohol_message+0x30>
	{
		alcohol=true;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <alcohol>
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <drowsy_smoke_alcohol_message+0x36>
	}
	else if(readbit(PINA,3)==1)
     c0a:	03 99       	sbic	0x00, 3	; 0
	{
		alcohol=false;
     c0c:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <alcohol>
	}
	
	UART2_sendString("AT\n\r");
     c10:	80 eb       	ldi	r24, 0xB0	; 176
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	65 d2       	rcall	.+1226   	; 0x10e0 <UART2_sendString>
     c16:	2f e3       	ldi	r18, 0x3F	; 63
     c18:	8d e0       	ldi	r24, 0x0D	; 13
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	21 50       	subi	r18, 0x01	; 1
     c1e:	80 40       	sbci	r24, 0x00	; 0
     c20:	90 40       	sbci	r25, 0x00	; 0
     c22:	e1 f7       	brne	.-8      	; 0xc1c <drowsy_smoke_alcohol_message+0x42>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <drowsy_smoke_alcohol_message+0x4c>
     c26:	00 00       	nop
	_delay_ms(1000);
	UART2_sendString("AT+CREG?\n\r");
     c28:	85 eb       	ldi	r24, 0xB5	; 181
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	59 d2       	rcall	.+1202   	; 0x10e0 <UART2_sendString>
     c2e:	2f e3       	ldi	r18, 0x3F	; 63
     c30:	8d e0       	ldi	r24, 0x0D	; 13
     c32:	93 e0       	ldi	r25, 0x03	; 3
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	90 40       	sbci	r25, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <drowsy_smoke_alcohol_message+0x5a>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <drowsy_smoke_alcohol_message+0x64>
     c3e:	00 00       	nop
	_delay_ms(1000);
	UART2_sendString("AT+CMGF=1\n\r");
     c40:	80 ec       	ldi	r24, 0xC0	; 192
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	4d d2       	rcall	.+1178   	; 0x10e0 <UART2_sendString>
     c46:	2f e3       	ldi	r18, 0x3F	; 63
     c48:	8d e0       	ldi	r24, 0x0D	; 13
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	80 40       	sbci	r24, 0x00	; 0
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	e1 f7       	brne	.-8      	; 0xc4c <drowsy_smoke_alcohol_message+0x72>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <drowsy_smoke_alcohol_message+0x7c>
	_delay_ms(1000);
	UART2_sendString("AT+CMGS=\"+201013982361\"\n\r");
     c56:	00 00       	nop
     c58:	8c ec       	ldi	r24, 0xCC	; 204
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	41 d2       	rcall	.+1154   	; 0x10e0 <UART2_sendString>
     c5e:	2f e3       	ldi	r18, 0x3F	; 63
     c60:	8d e0       	ldi	r24, 0x0D	; 13
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	21 50       	subi	r18, 0x01	; 1
     c66:	80 40       	sbci	r24, 0x00	; 0
     c68:	90 40       	sbci	r25, 0x00	; 0
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <drowsy_smoke_alcohol_message+0x8a>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <drowsy_smoke_alcohol_message+0x94>
     c6e:	00 00       	nop
	_delay_ms(1000);
	
	/********************message**************************/
	if (drown==true)
     c70:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <drown>
     c74:	88 23       	and	r24, r24
	{
		UART2_sendString("Driver of car 5748 fell asleep while driving and that is over the car condition : \n\r");
     c76:	21 f0       	breq	.+8      	; 0xc80 <drowsy_smoke_alcohol_message+0xa6>
     c78:	87 ea       	ldi	r24, 0xA7	; 167
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	31 d2       	rcall	.+1122   	; 0x10e0 <UART2_sendString>
     c7e:	0f c0       	rjmp	.+30     	; 0xc9e <drowsy_smoke_alcohol_message+0xc4>
	}
	else if (smoke==true)
     c80:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <smoke>
     c84:	88 23       	and	r24, r24
	{
		UART2_sendString("Smoke Detected in car 5748 and that is the overall car condition : \n\r");
     c86:	21 f0       	breq	.+8      	; 0xc90 <drowsy_smoke_alcohol_message+0xb6>
     c88:	8c ef       	ldi	r24, 0xFC	; 252
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	29 d2       	rcall	.+1106   	; 0x10e0 <UART2_sendString>
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <drowsy_smoke_alcohol_message+0xc4>
	}
	else if (alcohol==true)
     c90:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <alcohol>
     c94:	88 23       	and	r24, r24
	{
		UART2_sendString("Alcohol Detected in car 5748 and that is the overall car condition : \n\r");
     c96:	19 f0       	breq	.+6      	; 0xc9e <drowsy_smoke_alcohol_message+0xc4>
     c98:	82 e4       	ldi	r24, 0x42	; 66
     c9a:	94 e0       	ldi	r25, 0x04	; 4
	}
	if (smoke==true)
     c9c:	21 d2       	rcall	.+1090   	; 0x10e0 <UART2_sendString>
     c9e:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <smoke>
	{
		UART2_sendString("smoke detected\n\r");
     ca2:	88 23       	and	r24, r24
     ca4:	21 f0       	breq	.+8      	; 0xcae <drowsy_smoke_alcohol_message+0xd4>
     ca6:	8d e1       	ldi	r24, 0x1D	; 29
     ca8:	93 e0       	ldi	r25, 0x03	; 3
     caa:	1a d2       	rcall	.+1076   	; 0x10e0 <UART2_sendString>
	}
	else
	{
		UART2_sendString("smoke not detected\n\r");
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <drowsy_smoke_alcohol_message+0xda>
     cae:	8e e2       	ldi	r24, 0x2E	; 46
     cb0:	93 e0       	ldi	r25, 0x03	; 3
	}
	if (alcohol==true)
     cb2:	16 d2       	rcall	.+1068   	; 0x10e0 <UART2_sendString>
     cb4:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <alcohol>
	{
		UART2_sendString("alcohol detected\n\r");
     cb8:	88 23       	and	r24, r24
     cba:	21 f0       	breq	.+8      	; 0xcc4 <drowsy_smoke_alcohol_message+0xea>
     cbc:	83 e4       	ldi	r24, 0x43	; 67
     cbe:	93 e0       	ldi	r25, 0x03	; 3
	}
	else
	{
		UART2_sendString("alcohol not detected\n\r");
     cc0:	0f d2       	rcall	.+1054   	; 0x10e0 <UART2_sendString>
     cc2:	03 c0       	rjmp	.+6      	; 0xcca <drowsy_smoke_alcohol_message+0xf0>
     cc4:	86 e5       	ldi	r24, 0x56	; 86
	}
	if (drown==true)
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0b d2       	rcall	.+1046   	; 0x10e0 <UART2_sendString>
     cca:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <drown>
	{
		UART2_sendString("drown detected\n\r");
     cce:	88 23       	and	r24, r24
     cd0:	21 f0       	breq	.+8      	; 0xcda <drowsy_smoke_alcohol_message+0x100>
     cd2:	8d e6       	ldi	r24, 0x6D	; 109
     cd4:	93 e0       	ldi	r25, 0x03	; 3
	}
	else
	{
		UART2_sendString("drown not detected\n\r");
     cd6:	04 d2       	rcall	.+1032   	; 0x10e0 <UART2_sendString>
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <drowsy_smoke_alcohol_message+0x106>
     cda:	8e e7       	ldi	r24, 0x7E	; 126
     cdc:	93 e0       	ldi	r25, 0x03	; 3
	}
	UART2_sendString("Car Location is : \n");
     cde:	00 d2       	rcall	.+1024   	; 0x10e0 <UART2_sendString>
     ce0:	83 e9       	ldi	r24, 0x93	; 147
     ce2:	93 e0       	ldi	r25, 0x03	; 3
     ce4:	fd d1       	rcall	.+1018   	; 0x10e0 <UART2_sendString>
	gps_send_sms_data();
     ce6:	20 d1       	rcall	.+576    	; 0xf28 <gps_send_sms_data>
     ce8:	2f e3       	ldi	r18, 0x3F	; 63
     cea:	8d e0       	ldi	r24, 0x0D	; 13
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	80 40       	sbci	r24, 0x00	; 0
     cf2:	90 40       	sbci	r25, 0x00	; 0
     cf4:	e1 f7       	brne	.-8      	; 0xcee <drowsy_smoke_alcohol_message+0x114>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <drowsy_smoke_alcohol_message+0x11e>
     cf8:	00 00       	nop
     cfa:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
	/*****************************************************/
	_delay_ms(1000);
	while(BIT_IS_CLEAR(UCSR2A,UDRE2))
     cfe:	85 ff       	sbrs	r24, 5
     d00:	fc cf       	rjmp	.-8      	; 0xcfa <drowsy_smoke_alcohol_message+0x120>
     d02:	8a e1       	ldi	r24, 0x1A	; 26
	{
		;
	}
	UDR2 = 0x1A;
     d04:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
     d08:	2f e7       	ldi	r18, 0x7F	; 127
     d0a:	84 e8       	ldi	r24, 0x84	; 132
     d0c:	9e e1       	ldi	r25, 0x1E	; 30
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	80 40       	sbci	r24, 0x00	; 0
     d12:	90 40       	sbci	r25, 0x00	; 0
     d14:	e1 f7       	brne	.-8      	; 0xd0e <drowsy_smoke_alcohol_message+0x134>
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <drowsy_smoke_alcohol_message+0x13e>
     d18:	00 00       	nop
     d1a:	08 95       	ret

00000d1c <__vector_51>:
     d1c:	1f 92       	push	r1
	_delay_ms(10000);
}

ISR(USART2_RX_vect)
{
     d1e:	0f 92       	push	r0
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	0f 92       	push	r0
     d24:	11 24       	eor	r1, r1
     d26:	0b b6       	in	r0, 0x3b	; 59
     d28:	0f 92       	push	r0
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
	unsigned char data=UDR2;
     d42:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
	UART0_sendByte(data);
     d46:	a5 d1       	rcall	.+842    	; 0x1092 <UART0_sendByte>
}
     d48:	ff 91       	pop	r31
     d4a:	ef 91       	pop	r30
     d4c:	bf 91       	pop	r27
     d4e:	af 91       	pop	r26
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	7f 91       	pop	r23
     d56:	6f 91       	pop	r22
     d58:	5f 91       	pop	r21
     d5a:	4f 91       	pop	r20
     d5c:	3f 91       	pop	r19
     d5e:	2f 91       	pop	r18
     d60:	0f 90       	pop	r0
     d62:	0b be       	out	0x3b, r0	; 59
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <gps_init>:
uint8 i,j=0;
//uint8 done=0;

void gps_init()
{
	UART1_init();
     d6e:	64 d1       	rcall	.+712    	; 0x1038 <UART1_init>
	UART0_init();
     d70:	54 c1       	rjmp	.+680    	; 0x101a <UART0_init>
     d72:	08 95       	ret

00000d74 <receive>:
     d74:	cf 93       	push	r28
}

void receive()
{
     d76:	df 93       	push	r29

	value=UART1_recieveByte();
     d78:	a5 d1       	rcall	.+842    	; 0x10c4 <UART1_recieveByte>
     d7a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
	if(value=='$')
     d7e:	84 32       	cpi	r24, 0x24	; 36
     d80:	09 f0       	breq	.+2      	; 0xd84 <receive+0x10>
	{
		value=UART1_recieveByte();
     d82:	97 c0       	rjmp	.+302    	; 0xeb2 <receive+0x13e>
     d84:	9f d1       	rcall	.+830    	; 0x10c4 <UART1_recieveByte>
     d86:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
		if(value=='G')
     d8a:	87 34       	cpi	r24, 0x47	; 71
     d8c:	09 f0       	breq	.+2      	; 0xd90 <receive+0x1c>
		{
			value=UART1_recieveByte();
     d8e:	91 c0       	rjmp	.+290    	; 0xeb2 <receive+0x13e>
     d90:	99 d1       	rcall	.+818    	; 0x10c4 <UART1_recieveByte>
     d92:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
			if(value=='P')
     d96:	80 35       	cpi	r24, 0x50	; 80
     d98:	09 f0       	breq	.+2      	; 0xd9c <receive+0x28>
			{
				value=UART1_recieveByte();
     d9a:	8b c0       	rjmp	.+278    	; 0xeb2 <receive+0x13e>
     d9c:	93 d1       	rcall	.+806    	; 0x10c4 <UART1_recieveByte>
     d9e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
				if(value=='G')
     da2:	87 34       	cpi	r24, 0x47	; 71
     da4:	09 f0       	breq	.+2      	; 0xda8 <receive+0x34>
				{
					value=UART1_recieveByte();
     da6:	85 c0       	rjmp	.+266    	; 0xeb2 <receive+0x13e>
     da8:	8d d1       	rcall	.+794    	; 0x10c4 <UART1_recieveByte>
     daa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
					if(value=='G')
     dae:	87 34       	cpi	r24, 0x47	; 71
     db0:	09 f0       	breq	.+2      	; 0xdb4 <receive+0x40>
					{
						value=UART1_recieveByte();
     db2:	7f c0       	rjmp	.+254    	; 0xeb2 <receive+0x13e>
     db4:	87 d1       	rcall	.+782    	; 0x10c4 <UART1_recieveByte>
     db6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
						if(value=='A')
     dba:	81 34       	cpi	r24, 0x41	; 65
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <receive+0x4c>
						{
							value=UART1_recieveByte();
     dbe:	79 c0       	rjmp	.+242    	; 0xeb2 <receive+0x13e>
     dc0:	81 d1       	rcall	.+770    	; 0x10c4 <UART1_recieveByte>
     dc2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
							if(value==',')
     dc6:	8c 32       	cpi	r24, 0x2C	; 44
							{
								value=UART1_recieveByte();
     dc8:	09 f0       	breq	.+2      	; 0xdcc <receive+0x58>
     dca:	73 c0       	rjmp	.+230    	; 0xeb2 <receive+0x13e>
     dcc:	7b d1       	rcall	.+758    	; 0x10c4 <UART1_recieveByte>
     dce:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
								while(value!=',')
								{
									value=UART1_recieveByte();
     dd2:	03 c0       	rjmp	.+6      	; 0xdda <receive+0x66>
     dd4:	77 d1       	rcall	.+750    	; 0x10c4 <UART1_recieveByte>
     dd6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
						{
							value=UART1_recieveByte();
							if(value==',')
							{
								value=UART1_recieveByte();
								while(value!=',')
     dda:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <value>
     dde:	8c 32       	cpi	r24, 0x2C	; 44
								{
									value=UART1_recieveByte();
								}
								lati_value[0]=UART1_recieveByte();
     de0:	c9 f7       	brne	.-14     	; 0xdd4 <receive+0x60>
     de2:	70 d1       	rcall	.+736    	; 0x10c4 <UART1_recieveByte>
     de4:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <lati_value>
								value=lati_value[0];
     de8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
								for(i=1;value!=',';i++)
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <i>
								{
									lati_value[i]=UART1_recieveByte();
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <receive+0xa6>
     df4:	c0 91 47 06 	lds	r28, 0x0647	; 0x800647 <i>
     df8:	d0 e0       	ldi	r29, 0x00	; 0
     dfa:	64 d1       	rcall	.+712    	; 0x10c4 <UART1_recieveByte>
     dfc:	c9 5a       	subi	r28, 0xA9	; 169
     dfe:	d9 4f       	sbci	r29, 0xF9	; 249
     e00:	88 83       	st	Y, r24
									value=lati_value[i];
     e02:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <i>
     e06:	e8 2f       	mov	r30, r24
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	e9 5a       	subi	r30, 0xA9	; 169
     e0c:	f9 4f       	sbci	r31, 0xF9	; 249
     e0e:	90 81       	ld	r25, Z
     e10:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <value>
								{
									value=UART1_recieveByte();
								}
								lati_value[0]=UART1_recieveByte();
								value=lati_value[0];
								for(i=1;value!=',';i++)
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <i>
     e1a:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <value>
     e1e:	8c 32       	cpi	r24, 0x2C	; 44
								{
									lati_value[i]=UART1_recieveByte();
									value=lati_value[i];
								}
								lati_value[i-1]=' ';
     e20:	49 f7       	brne	.-46     	; 0xdf4 <receive+0x80>
     e22:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <i>
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	ea 5a       	subi	r30, 0xAA	; 170
     e2a:	f9 4f       	sbci	r31, 0xF9	; 249
								lati_dir=UART1_recieveByte();
     e2c:	80 e2       	ldi	r24, 0x20	; 32
     e2e:	80 83       	st	Z, r24
     e30:	49 d1       	rcall	.+658    	; 0x10c4 <UART1_recieveByte>
								value=UART1_recieveByte();
     e32:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <lati_dir>
     e36:	46 d1       	rcall	.+652    	; 0x10c4 <UART1_recieveByte>
     e38:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
								while(value!=',')
								{
									value=UART1_recieveByte();
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <receive+0xd0>
     e3e:	42 d1       	rcall	.+644    	; 0x10c4 <UART1_recieveByte>
     e40:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
									value=lati_value[i];
								}
								lati_value[i-1]=' ';
								lati_dir=UART1_recieveByte();
								value=UART1_recieveByte();
								while(value!=',')
     e44:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <value>
     e48:	8c 32       	cpi	r24, 0x2C	; 44
								{
									value=UART1_recieveByte();
								}
								longi_value[0]=UART1_recieveByte();
     e4a:	c9 f7       	brne	.-14     	; 0xe3e <receive+0xca>
     e4c:	3b d1       	rcall	.+630    	; 0x10c4 <UART1_recieveByte>
     e4e:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <longi_value>
								value=longi_value[0];
     e52:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <value>
								for(i=1;value!=',';i++)
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <i>
     e5c:	13 c0       	rjmp	.+38     	; 0xe84 <receive+0x110>
								{
									longi_value[i]=UART1_recieveByte();
     e5e:	c0 91 47 06 	lds	r28, 0x0647	; 0x800647 <i>
     e62:	d0 e0       	ldi	r29, 0x00	; 0
     e64:	2f d1       	rcall	.+606    	; 0x10c4 <UART1_recieveByte>
     e66:	c8 5b       	subi	r28, 0xB8	; 184
     e68:	d9 4f       	sbci	r29, 0xF9	; 249
     e6a:	88 83       	st	Y, r24
     e6c:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <i>
									value=longi_value[i];
     e70:	e8 2f       	mov	r30, r24
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	e8 5b       	subi	r30, 0xB8	; 184
     e76:	f9 4f       	sbci	r31, 0xF9	; 249
     e78:	90 81       	ld	r25, Z
     e7a:	90 93 66 06 	sts	0x0666, r25	; 0x800666 <value>
								{
									value=UART1_recieveByte();
								}
								longi_value[0]=UART1_recieveByte();
								value=longi_value[0];
								for(i=1;value!=',';i++)
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <i>
     e84:	80 91 66 06 	lds	r24, 0x0666	; 0x800666 <value>
     e88:	8c 32       	cpi	r24, 0x2C	; 44
     e8a:	49 f7       	brne	.-46     	; 0xe5e <receive+0xea>
								{
									longi_value[i]=UART1_recieveByte();
									value=longi_value[i];
								}
								longi_value[i-1]=' ';
     e8c:	e0 91 47 06 	lds	r30, 0x0647	; 0x800647 <i>
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	e9 5b       	subi	r30, 0xB9	; 185
     e94:	f9 4f       	sbci	r31, 0xF9	; 249
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	80 83       	st	Z, r24
								longi_dir=UART1_recieveByte();
     e9a:	14 d1       	rcall	.+552    	; 0x10c4 <UART1_recieveByte>
     e9c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <longi_dir>
     ea0:	2f ef       	ldi	r18, 0xFF	; 255
     ea2:	80 e7       	ldi	r24, 0x70	; 112
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	80 40       	sbci	r24, 0x00	; 0
     eaa:	90 40       	sbci	r25, 0x00	; 0
     eac:	e1 f7       	brne	.-8      	; 0xea6 <receive+0x132>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <receive+0x13c>
     eb0:	00 00       	nop
     eb2:	df 91       	pop	r29
					}
				}
			}
		}
	}
}
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <send_data>:
     eb8:	cf 93       	push	r28

void send_data()
{
     eba:	df 93       	push	r29
								int i=0;
								UART0_sendString("w,");
     ebc:	8a e8       	ldi	r24, 0x8A	; 138
     ebe:	94 e0       	ldi	r25, 0x04	; 4
     ec0:	ef d0       	rcall	.+478    	; 0x10a0 <UART0_sendString>
	}
}

void send_data()
{
								int i=0;
     ec2:	c0 e0       	ldi	r28, 0x00	; 0
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
								UART0_sendString("w,");
								while(lati_value[i]!='\0')
								{
									UART0_sendByte(lati_value[i]);
     ec6:	07 c0       	rjmp	.+14     	; 0xed6 <send_data+0x1e>
     ec8:	e4 d0       	rcall	.+456    	; 0x1092 <UART0_sendByte>
									i++;
     eca:	21 96       	adiw	r28, 0x01	; 1
									if (i==2)
     ecc:	c2 30       	cpi	r28, 0x02	; 2
     ece:	d1 05       	cpc	r29, r1
									{
										UART0_sendByte('*');
     ed0:	11 f4       	brne	.+4      	; 0xed6 <send_data+0x1e>
     ed2:	8a e2       	ldi	r24, 0x2A	; 42
     ed4:	de d0       	rcall	.+444    	; 0x1092 <UART0_sendByte>

void send_data()
{
								int i=0;
								UART0_sendString("w,");
								while(lati_value[i]!='\0')
     ed6:	fe 01       	movw	r30, r28
     ed8:	e9 5a       	subi	r30, 0xA9	; 169
     eda:	f9 4f       	sbci	r31, 0xF9	; 249
     edc:	80 81       	ld	r24, Z
     ede:	81 11       	cpse	r24, r1
									if (i==2)
									{
										UART0_sendByte('*');
									}
								}
								UART0_sendByte('`');
     ee0:	f3 cf       	rjmp	.-26     	; 0xec8 <send_data+0x10>
     ee2:	80 e6       	ldi	r24, 0x60	; 96
								UART0_sendByte(lati_dir);
     ee4:	d6 d0       	rcall	.+428    	; 0x1092 <UART0_sendByte>
     ee6:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <lati_dir>
								UART0_sendString("\n");
     eea:	d3 d0       	rcall	.+422    	; 0x1092 <UART0_sendByte>
     eec:	85 ea       	ldi	r24, 0xA5	; 165
     eee:	93 e0       	ldi	r25, 0x03	; 3

								i=1;
     ef0:	d7 d0       	rcall	.+430    	; 0x10a0 <UART0_sendString>
     ef2:	c1 e0       	ldi	r28, 0x01	; 1
								while(longi_value[i]!='\0')
     ef4:	d0 e0       	ldi	r29, 0x00	; 0
								{
									UART0_sendByte(longi_value[i]);
     ef6:	07 c0       	rjmp	.+14     	; 0xf06 <send_data+0x4e>
									i++;
     ef8:	cc d0       	rcall	.+408    	; 0x1092 <UART0_sendByte>
									if (i==3)
     efa:	21 96       	adiw	r28, 0x01	; 1
     efc:	c3 30       	cpi	r28, 0x03	; 3
     efe:	d1 05       	cpc	r29, r1
									{
										UART0_sendByte('*');
     f00:	11 f4       	brne	.+4      	; 0xf06 <send_data+0x4e>
     f02:	8a e2       	ldi	r24, 0x2A	; 42
								UART0_sendByte('`');
								UART0_sendByte(lati_dir);
								UART0_sendString("\n");

								i=1;
								while(longi_value[i]!='\0')
     f04:	c6 d0       	rcall	.+396    	; 0x1092 <UART0_sendByte>
     f06:	fe 01       	movw	r30, r28
     f08:	e8 5b       	subi	r30, 0xB8	; 184
     f0a:	f9 4f       	sbci	r31, 0xF9	; 249
     f0c:	80 81       	ld	r24, Z
									if (i==3)
									{
										UART0_sendByte('*');
									}
								}
								UART0_sendByte('`');
     f0e:	81 11       	cpse	r24, r1
     f10:	f3 cf       	rjmp	.-26     	; 0xef8 <send_data+0x40>
     f12:	80 e6       	ldi	r24, 0x60	; 96
								UART0_sendByte(longi_dir);
     f14:	be d0       	rcall	.+380    	; 0x1092 <UART0_sendByte>
     f16:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <longi_dir>
     f1a:	bb d0       	rcall	.+374    	; 0x1092 <UART0_sendByte>
								UART0_sendString("\n\r");
     f1c:	89 ef       	ldi	r24, 0xF9	; 249
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	bf d0       	rcall	.+382    	; 0x10a0 <UART0_sendString>
     f22:	df 91       	pop	r29
}
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <gps_send_sms_data>:
     f28:	cf 93       	push	r28
gps_send_sms_data()
{
     f2a:	df 93       	push	r29
								int i=0;
     f2c:	c0 e0       	ldi	r28, 0x00	; 0
     f2e:	d0 e0       	ldi	r29, 0x00	; 0
								while(lati_value[i]!='\0')
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <gps_send_sms_data+0x18>
								{
									UART2_sendByte(lati_value[i]);
     f32:	cf d0       	rcall	.+414    	; 0x10d2 <UART2_sendByte>
									i++;
     f34:	21 96       	adiw	r28, 0x01	; 1
									if (i==2)
     f36:	c2 30       	cpi	r28, 0x02	; 2
     f38:	d1 05       	cpc	r29, r1
     f3a:	11 f4       	brne	.+4      	; 0xf40 <gps_send_sms_data+0x18>
									{
										UART2_sendByte('*');
     f3c:	8a e2       	ldi	r24, 0x2A	; 42
     f3e:	c9 d0       	rcall	.+402    	; 0x10d2 <UART2_sendByte>
								UART0_sendString("\n\r");
}
gps_send_sms_data()
{
								int i=0;
								while(lati_value[i]!='\0')
     f40:	fe 01       	movw	r30, r28
     f42:	e9 5a       	subi	r30, 0xA9	; 169
     f44:	f9 4f       	sbci	r31, 0xF9	; 249
     f46:	80 81       	ld	r24, Z
     f48:	81 11       	cpse	r24, r1
									if (i==2)
									{
										UART2_sendByte('*');
									}
								}
								UART2_sendByte('`');
     f4a:	f3 cf       	rjmp	.-26     	; 0xf32 <gps_send_sms_data+0xa>
     f4c:	80 e6       	ldi	r24, 0x60	; 96
								UART2_sendByte(lati_dir);
     f4e:	c1 d0       	rcall	.+386    	; 0x10d2 <UART2_sendByte>
     f50:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <lati_dir>
								UART2_sendString("\n");
     f54:	be d0       	rcall	.+380    	; 0x10d2 <UART2_sendByte>
     f56:	85 ea       	ldi	r24, 0xA5	; 165
     f58:	93 e0       	ldi	r25, 0x03	; 3

								i=1;
     f5a:	c2 d0       	rcall	.+388    	; 0x10e0 <UART2_sendString>
     f5c:	c1 e0       	ldi	r28, 0x01	; 1
								while(longi_value[i]!='\0')
     f5e:	d0 e0       	ldi	r29, 0x00	; 0
								{
									UART2_sendByte(longi_value[i]);
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <gps_send_sms_data+0x48>
									i++;
     f62:	b7 d0       	rcall	.+366    	; 0x10d2 <UART2_sendByte>
									if (i==3)
     f64:	21 96       	adiw	r28, 0x01	; 1
     f66:	c3 30       	cpi	r28, 0x03	; 3
     f68:	d1 05       	cpc	r29, r1
									{
										UART2_sendByte('*');
     f6a:	11 f4       	brne	.+4      	; 0xf70 <gps_send_sms_data+0x48>
     f6c:	8a e2       	ldi	r24, 0x2A	; 42
     f6e:	b1 d0       	rcall	.+354    	; 0x10d2 <UART2_sendByte>
								UART2_sendByte('`');
								UART2_sendByte(lati_dir);
								UART2_sendString("\n");

								i=1;
								while(longi_value[i]!='\0')
     f70:	fe 01       	movw	r30, r28
     f72:	e8 5b       	subi	r30, 0xB8	; 184
     f74:	f9 4f       	sbci	r31, 0xF9	; 249
     f76:	80 81       	ld	r24, Z
									if (i==3)
									{
										UART2_sendByte('*');
									}
								}
								UART2_sendByte('`');
     f78:	81 11       	cpse	r24, r1
     f7a:	f3 cf       	rjmp	.-26     	; 0xf62 <gps_send_sms_data+0x3a>
								UART2_sendByte(longi_dir);
     f7c:	80 e6       	ldi	r24, 0x60	; 96
     f7e:	a9 d0       	rcall	.+338    	; 0x10d2 <UART2_sendByte>
     f80:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <longi_dir>
								UART2_sendString("\n");	
     f84:	a6 d0       	rcall	.+332    	; 0x10d2 <UART2_sendByte>
     f86:	85 ea       	ldi	r24, 0xA5	; 165
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	aa d0       	rcall	.+340    	; 0x10e0 <UART2_sendString>
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <main>:
#include "App.h"

int main(void)
{
    Init_Reg();
     f92:	f8 d8       	rcall	.-3600   	; 0x184 <Init_Reg>
	Verify_App();
     f94:	01 d5       	rcall	.+2562   	; 0x1998 <Verify_App>
     f96:	2f e7       	ldi	r18, 0x7F	; 127
     f98:	8f e4       	ldi	r24, 0x4F	; 79
     f9a:	92 e1       	ldi	r25, 0x12	; 18
     f9c:	21 50       	subi	r18, 0x01	; 1
     f9e:	80 40       	sbci	r24, 0x00	; 0
     fa0:	90 40       	sbci	r25, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <main+0xa>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <main+0x14>
     fa6:	00 00       	nop
     fa8:	85 ec       	ldi	r24, 0xC5	; 197
	/************************Start Drownis check*************************/
	_delay_ms(6000);
	UART3_sendString("Drowsy Start\n\r");
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	b2 d0       	rcall	.+356    	; 0x1112 <UART3_sendString>
     fae:	2f eb       	ldi	r18, 0xBF	; 191
     fb0:	87 e2       	ldi	r24, 0x27	; 39
     fb2:	99 e0       	ldi	r25, 0x09	; 9
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	80 40       	sbci	r24, 0x00	; 0
     fb8:	90 40       	sbci	r25, 0x00	; 0
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <main+0x22>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <main+0x2c>
     fbe:	00 00       	nop
	_delay_ms(3000);    //Ensure message is sent completely
    while(1)
	{
        Application();
     fc0:	9c db       	rcall	.-2248   	; 0x6fa <Application>
     fc2:	fe cf       	rjmp	.-4      	; 0xfc0 <main+0x2e>

00000fc4 <SPI_init_Master>:
     fc4:	84 b1       	in	r24, 0x04	; 4
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	84 b9       	out	0x04, r24	; 4
     fca:	84 b1       	in	r24, 0x04	; 4
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	84 b9       	out	0x04, r24	; 4
     fd0:	84 b1       	in	r24, 0x04	; 4
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	84 b9       	out	0x04, r24	; 4
     fd6:	84 b1       	in	r24, 0x04	; 4
     fd8:	84 60       	ori	r24, 0x04	; 4
     fda:	84 b9       	out	0x04, r24	; 4
     fdc:	80 e5       	ldi	r24, 0x50	; 80
     fde:	8c bd       	out	0x2c, r24	; 44
     fe0:	08 95       	ret

00000fe2 <SPI_sendByte>:
     fe2:	8e bd       	out	0x2e, r24	; 46
     fe4:	0d b4       	in	r0, 0x2d	; 45
     fe6:	07 fe       	sbrs	r0, 7
     fe8:	fd cf       	rjmp	.-6      	; 0xfe4 <SPI_sendByte+0x2>
     fea:	08 95       	ret

00000fec <timer0_init>:
﻿#include "timer.h"

void timer0_init(void)
{
	    	/* Disable Timer 0 */
	    	TCCR0A =  0x00;
     fec:	14 bc       	out	0x24, r1	; 36
	    	/* Setting pre scaler /1 */
	    	TCCR0B = 0x01;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	85 bd       	out	0x25, r24	; 37
	    	/* Initializing the timer with zero */
	    	TCNT0 = 0x00;
     ff2:	16 bc       	out	0x26, r1	; 38
			/* Timer overflow interrupt enable*/
			TIMSK0 |=(1<<TOIE0);
     ff4:	ee e6       	ldi	r30, 0x6E	; 110
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	80 83       	st	Z, r24
     ffe:	08 95       	ret

00001000 <timer2_init>:
	return;
}
void timer2_init(void)
{
	/* Disable Timer 0 */
	TCCR2A =  0x00;
    1000:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
	/* Setting pre scaler /1 */
	TCCR2B = 0x01;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
	/* Initializing the timer with zero */
	TCNT2 = 0x00;
    100a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
	/* Timer overflow interrupt enable*/
	TIMSK2 |=(1<<TOIE2);
    100e:	e0 e7       	ldi	r30, 0x70	; 112
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	81 60       	ori	r24, 0x01	; 1
    1016:	80 83       	st	Z, r24
    1018:	08 95       	ret

0000101a <UART0_init>:
	while(BIT_IS_CLEAR(UCSR3A,7))
	{
		;
	}
	return UDR3;
}
    101a:	e0 ec       	ldi	r30, 0xC0	; 192
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	80 83       	st	Z, r24
    1024:	88 e9       	ldi	r24, 0x98	; 152
    1026:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
    102a:	86 e0       	ldi	r24, 0x06	; 6
    102c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    1030:	83 e3       	ldi	r24, 0x33	; 51
    1032:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    1036:	08 95       	ret

00001038 <UART1_init>:
    1038:	e8 ec       	ldi	r30, 0xC8	; 200
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	80 83       	st	Z, r24
    1042:	88 e1       	ldi	r24, 0x18	; 24
    1044:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
    1048:	86 e0       	ldi	r24, 0x06	; 6
    104a:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
    104e:	87 e6       	ldi	r24, 0x67	; 103
    1050:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
    1054:	08 95       	ret

00001056 <UART2_init>:
    1056:	e0 ed       	ldi	r30, 0xD0	; 208
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	82 60       	ori	r24, 0x02	; 2
    105e:	80 83       	st	Z, r24
    1060:	88 e9       	ldi	r24, 0x98	; 152
    1062:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
    1066:	86 e0       	ldi	r24, 0x06	; 6
    1068:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
    106c:	87 e6       	ldi	r24, 0x67	; 103
    106e:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
    1072:	08 95       	ret

00001074 <UART3_init>:
    1074:	e0 e3       	ldi	r30, 0x30	; 48
    1076:	f1 e0       	ldi	r31, 0x01	; 1
    1078:	80 81       	ld	r24, Z
    107a:	82 60       	ori	r24, 0x02	; 2
    107c:	80 83       	st	Z, r24
    107e:	88 e9       	ldi	r24, 0x98	; 152
    1080:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x7c0131>
    1084:	86 e0       	ldi	r24, 0x06	; 6
    1086:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x7c0132>
    108a:	87 e6       	ldi	r24, 0x67	; 103
    108c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x7c0134>
    1090:	08 95       	ret

00001092 <UART0_sendByte>:
    1092:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1096:	95 ff       	sbrs	r25, 5
    1098:	fc cf       	rjmp	.-8      	; 0x1092 <UART0_sendByte>
    109a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    109e:	08 95       	ret

000010a0 <UART0_sendString>:
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	8c 01       	movw	r16, r24
    10a8:	c0 e0       	ldi	r28, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <UART0_sendString+0x10>
    10ac:	f2 df       	rcall	.-28     	; 0x1092 <UART0_sendByte>
    10ae:	cf 5f       	subi	r28, 0xFF	; 255
    10b0:	f8 01       	movw	r30, r16
    10b2:	ec 0f       	add	r30, r28
    10b4:	f1 1d       	adc	r31, r1
    10b6:	80 81       	ld	r24, Z
    10b8:	81 11       	cpse	r24, r1
    10ba:	f8 cf       	rjmp	.-16     	; 0x10ac <UART0_sendString+0xc>
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	08 95       	ret

000010c4 <UART1_recieveByte>:
    10c4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
    10c8:	88 23       	and	r24, r24
    10ca:	e4 f7       	brge	.-8      	; 0x10c4 <UART1_recieveByte>
    10cc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    10d0:	08 95       	ret

000010d2 <UART2_sendByte>:
    10d2:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
    10d6:	95 ff       	sbrs	r25, 5
    10d8:	fc cf       	rjmp	.-8      	; 0x10d2 <UART2_sendByte>
    10da:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    10de:	08 95       	ret

000010e0 <UART2_sendString>:
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	8c 01       	movw	r16, r24
    10e8:	c0 e0       	ldi	r28, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <UART2_sendString+0x10>
    10ec:	f2 df       	rcall	.-28     	; 0x10d2 <UART2_sendByte>
    10ee:	cf 5f       	subi	r28, 0xFF	; 255
    10f0:	f8 01       	movw	r30, r16
    10f2:	ec 0f       	add	r30, r28
    10f4:	f1 1d       	adc	r31, r1
    10f6:	80 81       	ld	r24, Z
    10f8:	81 11       	cpse	r24, r1
    10fa:	f8 cf       	rjmp	.-16     	; 0x10ec <UART2_sendString+0xc>
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <UART3_sendByte>:
    1104:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__TEXT_REGION_LENGTH__+0x7c0130>
    1108:	95 ff       	sbrs	r25, 5
    110a:	fc cf       	rjmp	.-8      	; 0x1104 <UART3_sendByte>
    110c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    1110:	08 95       	ret

00001112 <UART3_sendString>:

void UART3_sendString(const unsigned char *Str)
{
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	8c 01       	movw	r16, r24
	unsigned char i = 0;
    111a:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <UART3_sendString+0x10>
	{
		UART3_sendByte(Str[i]);
    111e:	f2 df       	rcall	.-28     	; 0x1104 <UART3_sendByte>
		i++;
    1120:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART3_sendString(const unsigned char *Str)
{
	unsigned char i = 0;
	while(Str[i] != '\0')
    1122:	f8 01       	movw	r30, r16
    1124:	ec 0f       	add	r30, r28
    1126:	f1 1d       	adc	r31, r1
    1128:	80 81       	ld	r24, Z
    112a:	81 11       	cpse	r24, r1
    112c:	f8 cf       	rjmp	.-16     	; 0x111e <UART3_sendString+0xc>
	{
		UART3_sendByte(Str[i]);
		i++;
	}

}
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	08 95       	ret

00001136 <enable_ex0_interrupt>:
	timer2_init();
}

void enable_ex0_interrupt(void)
{
	EICRB |= (1<<ISC40);   		// Trigger INT1 on any logic change.
    1136:	ea e6       	ldi	r30, 0x6A	; 106
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	80 83       	st	Z, r24
	EIMSK  |= (1<<INT4);			// Enable INT1 interrupts.
    1140:	8d b3       	in	r24, 0x1d	; 29
    1142:	80 61       	ori	r24, 0x10	; 16
    1144:	8d bb       	out	0x1d, r24	; 29
    1146:	08 95       	ret

00001148 <ultra0_init>:
uint32_t timer_counter0=0;
uint32_t distance0;

void ultra0_init(void)
{
	setbit(DDRC,3);
    1148:	87 b1       	in	r24, 0x07	; 7
    114a:	88 60       	ori	r24, 0x08	; 8
    114c:	87 b9       	out	0x07, r24	; 7
	clearbit(DDRE,5);
    114e:	8d b1       	in	r24, 0x0d	; 13
    1150:	8f 7d       	andi	r24, 0xDF	; 223
    1152:	8d b9       	out	0x0d, r24	; 13
	setbit(PORTE,5);
    1154:	8e b1       	in	r24, 0x0e	; 14
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	8e b9       	out	0x0e, r24	; 14
	enable_ex0_interrupt();
    115a:	ed df       	rcall	.-38     	; 0x1136 <enable_ex0_interrupt>
	timer2_init();
    115c:	51 cf       	rjmp	.-350    	; 0x1000 <timer2_init>
    115e:	08 95       	ret

00001160 <ultra0_triger>:
    1160:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <sensor_working0>
	EIMSK  |= (1<<INT4);			// Enable INT1 interrupts.
}

void ultra0_triger(void)
{
	if(!sensor_working0)
    1164:	81 11       	cpse	r24, r1
    1166:	0d c0       	rjmp	.+26     	; 0x1182 <ultra0_triger+0x22>
	{
		setbit(PORTC,3);
    1168:	88 b1       	in	r24, 0x08	; 8
    116a:	88 60       	ori	r24, 0x08	; 8
    116c:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    116e:	85 e3       	ldi	r24, 0x35	; 53
    1170:	8a 95       	dec	r24
    1172:	f1 f7       	brne	.-4      	; 0x1170 <ultra0_triger+0x10>
    1174:	00 00       	nop
		_delay_us(20);
		clearbit(PORTC,3);
    1176:	88 b1       	in	r24, 0x08	; 8
    1178:	87 7f       	andi	r24, 0xF7	; 247
    117a:	88 b9       	out	0x08, r24	; 8
		sensor_working0=1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 2a 06 	sts	0x062A, r24	; 0x80062a <sensor_working0>
    1182:	08 95       	ret

00001184 <__vector_6>:
	}
}

ISR(INT5_vect)
{
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	0b b6       	in	r0, 0x3b	; 59
    1190:	0f 92       	push	r0
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
	if(sensor_working0==1)
    11aa:	80 91 2a 06 	lds	r24, 0x062A	; 0x80062a <sensor_working0>
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	99 f5       	brne	.+102    	; 0x1218 <__vector_6+0x94>
	{
		if(rising_edge0==0)
    11b2:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <rising_edge0>
    11b6:	81 11       	cpse	r24, r1
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <__vector_6+0x52>
		{
			TCNT2=0x00;
    11ba:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
			rising_edge0=1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <rising_edge0>
			timer_counter0=0;
    11c4:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <timer_counter0>
    11c8:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <timer_counter0+0x1>
    11cc:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <timer_counter0+0x2>
    11d0:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <timer_counter0+0x3>
    11d4:	21 c0       	rjmp	.+66     	; 0x1218 <__vector_6+0x94>
		}
		else
		{
			distance0=(timer_counter0*256+TCNT2)/466;
    11d6:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <timer_counter0>
    11da:	90 91 26 06 	lds	r25, 0x0626	; 0x800626 <timer_counter0+0x1>
    11de:	a0 91 27 06 	lds	r26, 0x0627	; 0x800627 <timer_counter0+0x2>
    11e2:	b0 91 28 06 	lds	r27, 0x0628	; 0x800628 <timer_counter0+0x3>
    11e6:	ba 2f       	mov	r27, r26
    11e8:	a9 2f       	mov	r26, r25
    11ea:	98 2f       	mov	r25, r24
    11ec:	88 27       	eor	r24, r24
    11ee:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	62 0f       	add	r22, r18
    11f8:	71 1d       	adc	r23, r1
    11fa:	81 1d       	adc	r24, r1
    11fc:	91 1d       	adc	r25, r1
    11fe:	22 ed       	ldi	r18, 0xD2	; 210
    1200:	31 e0       	ldi	r19, 0x01	; 1
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	92 d5       	rcall	.+2852   	; 0x1d2c <__udivmodsi4>
    1208:	20 93 67 06 	sts	0x0667, r18	; 0x800667 <distance0>
    120c:	30 93 68 06 	sts	0x0668, r19	; 0x800668 <distance0+0x1>
    1210:	40 93 69 06 	sts	0x0669, r20	; 0x800669 <distance0+0x2>
    1214:	50 93 6a 06 	sts	0x066A, r21	; 0x80066a <distance0+0x3>
		}
	}
}
    1218:	ff 91       	pop	r31
    121a:	ef 91       	pop	r30
    121c:	bf 91       	pop	r27
    121e:	af 91       	pop	r26
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	7f 91       	pop	r23
    1226:	6f 91       	pop	r22
    1228:	5f 91       	pop	r21
    122a:	4f 91       	pop	r20
    122c:	3f 91       	pop	r19
    122e:	2f 91       	pop	r18
    1230:	0f 90       	pop	r0
    1232:	0b be       	out	0x3b, r0	; 59
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <__vector_15>:

ISR(TIMER2_OVF_vect)
{
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	2f 93       	push	r18
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
	timer_counter0++;
    1252:	80 91 25 06 	lds	r24, 0x0625	; 0x800625 <timer_counter0>
    1256:	90 91 26 06 	lds	r25, 0x0626	; 0x800626 <timer_counter0+0x1>
    125a:	a0 91 27 06 	lds	r26, 0x0627	; 0x800627 <timer_counter0+0x2>
    125e:	b0 91 28 06 	lds	r27, 0x0628	; 0x800628 <timer_counter0+0x3>
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	a1 1d       	adc	r26, r1
    1266:	b1 1d       	adc	r27, r1
    1268:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <timer_counter0>
    126c:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <timer_counter0+0x1>
    1270:	a0 93 27 06 	sts	0x0627, r26	; 0x800627 <timer_counter0+0x2>
    1274:	b0 93 28 06 	sts	0x0628, r27	; 0x800628 <timer_counter0+0x3>
	if(timer_counter0 >730)
    1278:	8b 3d       	cpi	r24, 0xDB	; 219
    127a:	92 40       	sbci	r25, 0x02	; 2
    127c:	a1 05       	cpc	r26, r1
    127e:	b1 05       	cpc	r27, r1
    1280:	70 f0       	brcs	.+28     	; 0x129e <__vector_15+0x60>
	{
		TCNT2=0x00;
    1282:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7c00b2>
		sensor_working0=0;
    1286:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <sensor_working0>
		rising_edge0=0;
    128a:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <rising_edge0>
		timer_counter0=0;
    128e:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <timer_counter0>
    1292:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <timer_counter0+0x1>
    1296:	10 92 27 06 	sts	0x0627, r1	; 0x800627 <timer_counter0+0x2>
    129a:	10 92 28 06 	sts	0x0628, r1	; 0x800628 <timer_counter0+0x3>
	}
}
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	0f 90       	pop	r0
    12ae:	1f 90       	pop	r1
    12b0:	18 95       	reti

000012b2 <enable_ex1_interrupt>:
	timer0_init();
}

void enable_ex1_interrupt(void)
{
	EICRB |= (1<<ISC50);   		// Trigger INT1 on any logic change.
    12b2:	ea e6       	ldi	r30, 0x6A	; 106
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	84 60       	ori	r24, 0x04	; 4
    12ba:	80 83       	st	Z, r24
	EIMSK  |= (1<<INT5);			// Enable INT1 interrupts.
    12bc:	8d b3       	in	r24, 0x1d	; 29
    12be:	80 62       	ori	r24, 0x20	; 32
    12c0:	8d bb       	out	0x1d, r24	; 29
    12c2:	08 95       	ret

000012c4 <ultra1_init>:
uint32_t timer_counter1=0;
uint32_t distance1;

void ultra1_init(void)
{
	setbit(DDRC,2);
    12c4:	87 b1       	in	r24, 0x07	; 7
    12c6:	84 60       	ori	r24, 0x04	; 4
    12c8:	87 b9       	out	0x07, r24	; 7
	clearbit(DDRE,4);
    12ca:	8d b1       	in	r24, 0x0d	; 13
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	8d b9       	out	0x0d, r24	; 13
	setbit(PORTE,4);
    12d0:	8e b1       	in	r24, 0x0e	; 14
    12d2:	80 61       	ori	r24, 0x10	; 16
    12d4:	8e b9       	out	0x0e, r24	; 14
	enable_ex1_interrupt();
    12d6:	ed df       	rcall	.-38     	; 0x12b2 <enable_ex1_interrupt>
	timer0_init();
    12d8:	89 ce       	rjmp	.-750    	; 0xfec <timer0_init>
    12da:	08 95       	ret

000012dc <ultra1_triger>:
    12dc:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <sensor_working1>
	EIMSK  |= (1<<INT5);			// Enable INT1 interrupts.
}

void ultra1_triger(void)
{
	if(!sensor_working1)
    12e0:	81 11       	cpse	r24, r1
    12e2:	0d c0       	rjmp	.+26     	; 0x12fe <ultra1_triger+0x22>
	{
		setbit(PORTC,2);
    12e4:	88 b1       	in	r24, 0x08	; 8
    12e6:	84 60       	ori	r24, 0x04	; 4
    12e8:	88 b9       	out	0x08, r24	; 8
    12ea:	85 e3       	ldi	r24, 0x35	; 53
    12ec:	8a 95       	dec	r24
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <ultra1_triger+0x10>
    12f0:	00 00       	nop
		_delay_us(20);
		clearbit(PORTC,2);
    12f2:	88 b1       	in	r24, 0x08	; 8
    12f4:	8b 7f       	andi	r24, 0xFB	; 251
    12f6:	88 b9       	out	0x08, r24	; 8
		sensor_working1=1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <sensor_working1>
    12fe:	08 95       	ret

00001300 <__vector_5>:
	}
}

ISR(INT4_vect)
{
    1300:	1f 92       	push	r1
    1302:	0f 92       	push	r0
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	0f 92       	push	r0
    1308:	11 24       	eor	r1, r1
    130a:	0b b6       	in	r0, 0x3b	; 59
    130c:	0f 92       	push	r0
    130e:	2f 93       	push	r18
    1310:	3f 93       	push	r19
    1312:	4f 93       	push	r20
    1314:	5f 93       	push	r21
    1316:	6f 93       	push	r22
    1318:	7f 93       	push	r23
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
    131e:	af 93       	push	r26
    1320:	bf 93       	push	r27
    1322:	ef 93       	push	r30
    1324:	ff 93       	push	r31
	if(sensor_working1==1)
    1326:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <sensor_working1>
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	89 f5       	brne	.+98     	; 0x1390 <__vector_5+0x90>
	{
		if(rising_edge1==0)
    132e:	80 91 2f 06 	lds	r24, 0x062F	; 0x80062f <rising_edge1>
    1332:	81 11       	cpse	r24, r1
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <__vector_5+0x50>
		{
			TCNT0=0x00;
    1336:	16 bc       	out	0x26, r1	; 38
			rising_edge1=1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <rising_edge1>
			timer_counter1=0;
    133e:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <timer_counter1>
    1342:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <timer_counter1+0x1>
    1346:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <timer_counter1+0x2>
    134a:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <timer_counter1+0x3>
    134e:	20 c0       	rjmp	.+64     	; 0x1390 <__vector_5+0x90>
		}
		else
		{
			distance1=(timer_counter1*256+TCNT0)/466;
    1350:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <timer_counter1>
    1354:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <timer_counter1+0x1>
    1358:	a0 91 2d 06 	lds	r26, 0x062D	; 0x80062d <timer_counter1+0x2>
    135c:	b0 91 2e 06 	lds	r27, 0x062E	; 0x80062e <timer_counter1+0x3>
    1360:	ba 2f       	mov	r27, r26
    1362:	a9 2f       	mov	r26, r25
    1364:	98 2f       	mov	r25, r24
    1366:	88 27       	eor	r24, r24
    1368:	26 b5       	in	r18, 0x26	; 38
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	62 0f       	add	r22, r18
    1370:	71 1d       	adc	r23, r1
    1372:	81 1d       	adc	r24, r1
    1374:	91 1d       	adc	r25, r1
    1376:	22 ed       	ldi	r18, 0xD2	; 210
    1378:	31 e0       	ldi	r19, 0x01	; 1
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	d6 d4       	rcall	.+2476   	; 0x1d2c <__udivmodsi4>
    1380:	20 93 6b 06 	sts	0x066B, r18	; 0x80066b <distance1>
    1384:	30 93 6c 06 	sts	0x066C, r19	; 0x80066c <distance1+0x1>
    1388:	40 93 6d 06 	sts	0x066D, r20	; 0x80066d <distance1+0x2>
    138c:	50 93 6e 06 	sts	0x066E, r21	; 0x80066e <distance1+0x3>
		}
	}
}
    1390:	ff 91       	pop	r31
    1392:	ef 91       	pop	r30
    1394:	bf 91       	pop	r27
    1396:	af 91       	pop	r26
    1398:	9f 91       	pop	r25
    139a:	8f 91       	pop	r24
    139c:	7f 91       	pop	r23
    139e:	6f 91       	pop	r22
    13a0:	5f 91       	pop	r21
    13a2:	4f 91       	pop	r20
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0b be       	out	0x3b, r0	; 59
    13ac:	0f 90       	pop	r0
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	0f 90       	pop	r0
    13b2:	1f 90       	pop	r1
    13b4:	18 95       	reti

000013b6 <__vector_23>:

ISR(TIMER0_OVF_vect)
{
    13b6:	1f 92       	push	r1
    13b8:	0f 92       	push	r0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	0f 92       	push	r0
    13be:	11 24       	eor	r1, r1
    13c0:	2f 93       	push	r18
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
	timer_counter1++;
    13ca:	80 91 2b 06 	lds	r24, 0x062B	; 0x80062b <timer_counter1>
    13ce:	90 91 2c 06 	lds	r25, 0x062C	; 0x80062c <timer_counter1+0x1>
    13d2:	a0 91 2d 06 	lds	r26, 0x062D	; 0x80062d <timer_counter1+0x2>
    13d6:	b0 91 2e 06 	lds	r27, 0x062E	; 0x80062e <timer_counter1+0x3>
    13da:	01 96       	adiw	r24, 0x01	; 1
    13dc:	a1 1d       	adc	r26, r1
    13de:	b1 1d       	adc	r27, r1
    13e0:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <timer_counter1>
    13e4:	90 93 2c 06 	sts	0x062C, r25	; 0x80062c <timer_counter1+0x1>
    13e8:	a0 93 2d 06 	sts	0x062D, r26	; 0x80062d <timer_counter1+0x2>
    13ec:	b0 93 2e 06 	sts	0x062E, r27	; 0x80062e <timer_counter1+0x3>
	if(timer_counter1 >730)
    13f0:	8b 3d       	cpi	r24, 0xDB	; 219
    13f2:	92 40       	sbci	r25, 0x02	; 2
    13f4:	a1 05       	cpc	r26, r1
    13f6:	b1 05       	cpc	r27, r1
    13f8:	68 f0       	brcs	.+26     	; 0x1414 <__vector_23+0x5e>
	{
		TCNT0=0x00;
    13fa:	16 bc       	out	0x26, r1	; 38
		sensor_working1=0;
    13fc:	10 92 30 06 	sts	0x0630, r1	; 0x800630 <sensor_working1>
		rising_edge1=0;
    1400:	10 92 2f 06 	sts	0x062F, r1	; 0x80062f <rising_edge1>
		timer_counter1=0;
    1404:	10 92 2b 06 	sts	0x062B, r1	; 0x80062b <timer_counter1>
    1408:	10 92 2c 06 	sts	0x062C, r1	; 0x80062c <timer_counter1+0x1>
    140c:	10 92 2d 06 	sts	0x062D, r1	; 0x80062d <timer_counter1+0x2>
    1410:	10 92 2e 06 	sts	0x062E, r1	; 0x80062e <timer_counter1+0x3>
	}
}
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <raspi_check>:
		manual_authorization();
	}
}

bool raspi_check()
{
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
	unsigned int timer;
	int count;
	UART0_sendString("t,Raspberry check !\n\r");
    1430:	84 ed       	ldi	r24, 0xD4	; 212
    1432:	94 e0       	ldi	r25, 0x04	; 4
    1434:	35 de       	rcall	.-918    	; 0x10a0 <UART0_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1436:	2f eb       	ldi	r18, 0xBF	; 191
    1438:	87 e2       	ldi	r24, 0x27	; 39
    143a:	99 e0       	ldi	r25, 0x09	; 9
    143c:	21 50       	subi	r18, 0x01	; 1
    143e:	80 40       	sbci	r24, 0x00	; 0
    1440:	90 40       	sbci	r25, 0x00	; 0
    1442:	e1 f7       	brne	.-8      	; 0x143c <raspi_check+0x14>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <raspi_check+0x1e>
    1446:	00 00       	nop
	_delay_ms(3000);
	UART3_sendString("Hello pi\n\r");
    1448:	8a ee       	ldi	r24, 0xEA	; 234
    144a:	94 e0       	ldi	r25, 0x04	; 4
    144c:	62 de       	rcall	.-828    	; 0x1112 <UART3_sendString>

	for (count=0;count<40;count++)
    144e:	00 e0       	ldi	r16, 0x00	; 0
    1450:	10 e0       	ldi	r17, 0x00	; 0
    1452:	34 c0       	rjmp	.+104    	; 0x14bc <raspi_check+0x94>
    1454:	2f eb       	ldi	r18, 0xBF	; 191
    1456:	87 e2       	ldi	r24, 0x27	; 39
    1458:	99 e0       	ldi	r25, 0x09	; 9
    145a:	21 50       	subi	r18, 0x01	; 1
    145c:	80 40       	sbci	r24, 0x00	; 0
    145e:	90 40       	sbci	r25, 0x00	; 0
    1460:	e1 f7       	brne	.-8      	; 0x145a <raspi_check+0x32>
    1462:	00 c0       	rjmp	.+0      	; 0x1464 <raspi_check+0x3c>
    1464:	00 00       	nop
	{
		_delay_ms(3000);
		UART3_sendString("Hello pi\n\r");
    1466:	8a ee       	ldi	r24, 0xEA	; 234
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	53 de       	rcall	.-858    	; 0x1112 <UART3_sendString>
		
		for (timer=0;timer<60000;timer++)
    146c:	c0 e0       	ldi	r28, 0x00	; 0
    146e:	d0 e0       	ldi	r29, 0x00	; 0
    1470:	1f c0       	rjmp	.+62     	; 0x14b0 <raspi_check+0x88>
		{
			if (!(strcmp(raspberryData,"Hello AVR")))
    1472:	65 ef       	ldi	r22, 0xF5	; 245
    1474:	74 e0       	ldi	r23, 0x04	; 4
    1476:	81 e3       	ldi	r24, 0x31	; 49
    1478:	96 e0       	ldi	r25, 0x06	; 6
    147a:	97 d4       	rcall	.+2350   	; 0x1daa <strcmp>
    147c:	89 2b       	or	r24, r25
			{
				UART0_sendString("r\n\r");
    147e:	b9 f4       	brne	.+46     	; 0x14ae <raspi_check+0x86>
    1480:	8e e2       	ldi	r24, 0x2E	; 46
    1482:	92 e0       	ldi	r25, 0x02	; 2
				UART0_sendString("r\n\r");
    1484:	0d de       	rcall	.-998    	; 0x10a0 <UART0_sendString>
    1486:	8e e2       	ldi	r24, 0x2E	; 46
    1488:	92 e0       	ldi	r25, 0x02	; 2
				UART0_sendString("r\n\r");
    148a:	0a de       	rcall	.-1004   	; 0x10a0 <UART0_sendString>
    148c:	8e e2       	ldi	r24, 0x2E	; 46
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	07 de       	rcall	.-1010   	; 0x10a0 <UART0_sendString>
				UART0_sendString("r\n\r");	
    1492:	8e e2       	ldi	r24, 0x2E	; 46
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	04 de       	rcall	.-1016   	; 0x10a0 <UART0_sendString>
    1498:	2f e1       	ldi	r18, 0x1F	; 31
    149a:	81 ea       	ldi	r24, 0xA1	; 161
    149c:	97 e0       	ldi	r25, 0x07	; 7
    149e:	21 50       	subi	r18, 0x01	; 1
    14a0:	80 40       	sbci	r24, 0x00	; 0
    14a2:	90 40       	sbci	r25, 0x00	; 0
    14a4:	e1 f7       	brne	.-8      	; 0x149e <raspi_check+0x76>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <raspi_check+0x80>
    14a8:	00 00       	nop
    14aa:	81 e0       	ldi	r24, 0x01	; 1
				_delay_ms(2500);
				return true;
    14ac:	2c c0       	rjmp	.+88     	; 0x1506 <raspi_check+0xde>
    14ae:	21 96       	adiw	r28, 0x01	; 1
	for (count=0;count<40;count++)
	{
		_delay_ms(3000);
		UART3_sendString("Hello pi\n\r");
		
		for (timer=0;timer<60000;timer++)
    14b0:	c0 36       	cpi	r28, 0x60	; 96
    14b2:	2a ee       	ldi	r18, 0xEA	; 234
    14b4:	d2 07       	cpc	r29, r18
    14b6:	e8 f2       	brcs	.-70     	; 0x1472 <raspi_check+0x4a>
    14b8:	0f 5f       	subi	r16, 0xFF	; 255
	int count;
	UART0_sendString("t,Raspberry check !\n\r");
	_delay_ms(3000);
	UART3_sendString("Hello pi\n\r");

	for (count=0;count<40;count++)
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	08 32       	cpi	r16, 0x28	; 40
    14be:	11 05       	cpc	r17, r1
    14c0:	4c f2       	brlt	.-110    	; 0x1454 <raspi_check+0x2c>
    14c2:	8f eb       	ldi	r24, 0xBF	; 191
    14c4:	97 e2       	ldi	r25, 0x27	; 39
    14c6:	29 e0       	ldi	r18, 0x09	; 9
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	90 40       	sbci	r25, 0x00	; 0
    14cc:	20 40       	sbci	r18, 0x00	; 0
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <raspi_check+0xa0>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <raspi_check+0xaa>
    14d2:	00 00       	nop
				return true;
			}
		}
	}
	_delay_ms(3000);
	UART0_sendString("t,Raspberry not Detected !\n\r");
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	94 e0       	ldi	r25, 0x04	; 4
    14d8:	e3 dd       	rcall	.-1082   	; 0x10a0 <UART0_sendString>
    14da:	8f eb       	ldi	r24, 0xBF	; 191
    14dc:	96 ec       	ldi	r25, 0xC6	; 198
    14de:	2d e2       	ldi	r18, 0x2D	; 45
    14e0:	81 50       	subi	r24, 0x01	; 1
    14e2:	90 40       	sbci	r25, 0x00	; 0
    14e4:	20 40       	sbci	r18, 0x00	; 0
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <raspi_check+0xb8>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <raspi_check+0xc2>
    14ea:	00 00       	nop
	_delay_ms(15000);
	UART0_sendString("t,Enter Code Manually !\n\r");
    14ec:	8c e1       	ldi	r24, 0x1C	; 28
    14ee:	95 e0       	ldi	r25, 0x05	; 5
    14f0:	d7 dd       	rcall	.-1106   	; 0x10a0 <UART0_sendString>
    14f2:	8f e7       	ldi	r24, 0x7F	; 127
    14f4:	94 e8       	ldi	r25, 0x84	; 132
    14f6:	2e e1       	ldi	r18, 0x1E	; 30
    14f8:	81 50       	subi	r24, 0x01	; 1
    14fa:	90 40       	sbci	r25, 0x00	; 0
    14fc:	20 40       	sbci	r18, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <raspi_check+0xd0>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <raspi_check+0xda>
    1502:	00 00       	nop
    1504:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(10000);
	return false;
    1506:	df 91       	pop	r29
}
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	08 95       	ret

00001510 <Interupt_raspi_check>:
    1510:	0f 93       	push	r16
bool Interupt_raspi_check()
{
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
	unsigned int timer;
	int count;
	UART3_sendString("Hello pi\n\r");
    1518:	8a ee       	ldi	r24, 0xEA	; 234
    151a:	94 e0       	ldi	r25, 0x04	; 4
    151c:	fa dd       	rcall	.-1036   	; 0x1112 <UART3_sendString>
	for (count=0;count<3;count++)
    151e:	00 e0       	ldi	r16, 0x00	; 0
    1520:	10 e0       	ldi	r17, 0x00	; 0
    1522:	31 c0       	rjmp	.+98     	; 0x1586 <Interupt_raspi_check+0x76>
	{			
		for (timer=0;timer<60000;timer++)
		{
			if (!(strcmp(raspberryData,"Hello AVR")))
    1524:	65 ef       	ldi	r22, 0xF5	; 245
    1526:	74 e0       	ldi	r23, 0x04	; 4
    1528:	81 e3       	ldi	r24, 0x31	; 49
    152a:	96 e0       	ldi	r25, 0x06	; 6
    152c:	3e d4       	rcall	.+2172   	; 0x1daa <strcmp>
    152e:	89 2b       	or	r24, r25
    1530:	01 f5       	brne	.+64     	; 0x1572 <Interupt_raspi_check+0x62>
			{
				UART0_sendString("r\n\r");
    1532:	8e e2       	ldi	r24, 0x2E	; 46
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	b4 dd       	rcall	.-1176   	; 0x10a0 <UART0_sendString>
				UART0_sendString("r\n\r");
    1538:	8e e2       	ldi	r24, 0x2E	; 46
    153a:	92 e0       	ldi	r25, 0x02	; 2
    153c:	b1 dd       	rcall	.-1182   	; 0x10a0 <UART0_sendString>
    153e:	2f e3       	ldi	r18, 0x3F	; 63
    1540:	8d e0       	ldi	r24, 0x0D	; 13
    1542:	93 e0       	ldi	r25, 0x03	; 3
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	80 40       	sbci	r24, 0x00	; 0
    1548:	90 40       	sbci	r25, 0x00	; 0
    154a:	e1 f7       	brne	.-8      	; 0x1544 <Interupt_raspi_check+0x34>
    154c:	00 c0       	rjmp	.+0      	; 0x154e <Interupt_raspi_check+0x3e>
    154e:	00 00       	nop
				_delay_ms(1000);
				UART0_sendString("r\n\r");
    1550:	8e e2       	ldi	r24, 0x2E	; 46
    1552:	92 e0       	ldi	r25, 0x02	; 2
    1554:	a5 dd       	rcall	.-1206   	; 0x10a0 <UART0_sendString>
				UART0_sendString("r\n\r");		
    1556:	8e e2       	ldi	r24, 0x2E	; 46
    1558:	92 e0       	ldi	r25, 0x02	; 2
    155a:	a2 dd       	rcall	.-1212   	; 0x10a0 <UART0_sendString>
    155c:	2f e3       	ldi	r18, 0x3F	; 63
    155e:	8d e0       	ldi	r24, 0x0D	; 13
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	21 50       	subi	r18, 0x01	; 1
    1564:	80 40       	sbci	r24, 0x00	; 0
    1566:	90 40       	sbci	r25, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <Interupt_raspi_check+0x52>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <Interupt_raspi_check+0x5c>
    156c:	00 00       	nop
    156e:	81 e0       	ldi	r24, 0x01	; 1
				_delay_ms(1000);

				return true;
    1570:	0e c0       	rjmp	.+28     	; 0x158e <Interupt_raspi_check+0x7e>
    1572:	21 96       	adiw	r28, 0x01	; 1
	unsigned int timer;
	int count;
	UART3_sendString("Hello pi\n\r");
	for (count=0;count<3;count++)
	{			
		for (timer=0;timer<60000;timer++)
    1574:	02 c0       	rjmp	.+4      	; 0x157a <Interupt_raspi_check+0x6a>
    1576:	c0 e0       	ldi	r28, 0x00	; 0
    1578:	d0 e0       	ldi	r29, 0x00	; 0
    157a:	c0 36       	cpi	r28, 0x60	; 96
    157c:	2a ee       	ldi	r18, 0xEA	; 234
    157e:	d2 07       	cpc	r29, r18
    1580:	88 f2       	brcs	.-94     	; 0x1524 <Interupt_raspi_check+0x14>
    1582:	0f 5f       	subi	r16, 0xFF	; 255
bool Interupt_raspi_check()
{
	unsigned int timer;
	int count;
	UART3_sendString("Hello pi\n\r");
	for (count=0;count<3;count++)
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	03 30       	cpi	r16, 0x03	; 3
    1588:	11 05       	cpc	r17, r1
    158a:	ac f3       	brlt	.-22     	; 0x1576 <Interupt_raspi_check+0x66>
    158c:	80 e0       	ldi	r24, 0x00	; 0

				return true;
			}
		}
	}
	return false;
    158e:	df 91       	pop	r29
}
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	08 95       	ret

00001598 <auto_authorization>:
    1598:	0f 93       	push	r16

bool auto_authorization()
{
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	2f e7       	ldi	r18, 0x7F	; 127
    15a2:	8f e4       	ldi	r24, 0x4F	; 79
    15a4:	92 e1       	ldi	r25, 0x12	; 18
    15a6:	21 50       	subi	r18, 0x01	; 1
    15a8:	80 40       	sbci	r24, 0x00	; 0
    15aa:	90 40       	sbci	r25, 0x00	; 0
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <auto_authorization+0xe>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <auto_authorization+0x18>
    15b0:	00 00       	nop
	unsigned int timer;
	int count;
	_delay_ms(6000);
	UART3_sendString("Open_face\n\r");
    15b2:	86 e3       	ldi	r24, 0x36	; 54
    15b4:	95 e0       	ldi	r25, 0x05	; 5
    15b6:	ad dd       	rcall	.-1190   	; 0x1112 <UART3_sendString>
	for (count=0;count<50;count++)
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	ec c0       	rjmp	.+472    	; 0x1796 <auto_authorization+0x1fe>
	{
		for (timer=0;timer<50000;timer++)  //counter to detect face
		{
			if (!(strcmp(raspberryData,"Ahmed")))
    15be:	62 e4       	ldi	r22, 0x42	; 66
    15c0:	75 e0       	ldi	r23, 0x05	; 5
    15c2:	81 e3       	ldi	r24, 0x31	; 49
    15c4:	96 e0       	ldi	r25, 0x06	; 6
    15c6:	f1 d3       	rcall	.+2018   	; 0x1daa <strcmp>
    15c8:	89 2b       	or	r24, r25
    15ca:	31 f5       	brne	.+76     	; 0x1618 <auto_authorization+0x80>
			{
				UART0_sendString("t,User verified\n\r");
    15cc:	88 e4       	ldi	r24, 0x48	; 72
    15ce:	95 e0       	ldi	r25, 0x05	; 5
    15d0:	67 dd       	rcall	.-1330   	; 0x10a0 <UART0_sendString>
    15d2:	2f e3       	ldi	r18, 0x3F	; 63
    15d4:	82 e4       	ldi	r24, 0x42	; 66
    15d6:	9f e0       	ldi	r25, 0x0F	; 15
    15d8:	21 50       	subi	r18, 0x01	; 1
    15da:	80 40       	sbci	r24, 0x00	; 0
    15dc:	90 40       	sbci	r25, 0x00	; 0
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <auto_authorization+0x40>
    15e0:	00 c0       	rjmp	.+0      	; 0x15e2 <auto_authorization+0x4a>
				_delay_ms(5000);
				UART0_sendString("q,Ahmed\n\r");
    15e2:	00 00       	nop
    15e4:	8a e5       	ldi	r24, 0x5A	; 90
    15e6:	95 e0       	ldi	r25, 0x05	; 5
    15e8:	5b dd       	rcall	.-1354   	; 0x10a0 <UART0_sendString>
    15ea:	2f e3       	ldi	r18, 0x3F	; 63
    15ec:	82 e4       	ldi	r24, 0x42	; 66
    15ee:	9f e0       	ldi	r25, 0x0F	; 15
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	80 40       	sbci	r24, 0x00	; 0
    15f4:	90 40       	sbci	r25, 0x00	; 0
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <auto_authorization+0x58>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <auto_authorization+0x62>
				_delay_ms(5000);
				UART3_sendString("Close_face");
    15fa:	00 00       	nop
    15fc:	84 e6       	ldi	r24, 0x64	; 100
    15fe:	95 e0       	ldi	r25, 0x05	; 5
    1600:	88 dd       	rcall	.-1264   	; 0x1112 <UART3_sendString>
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	84 e3       	ldi	r24, 0x34	; 52
    1606:	9c e0       	ldi	r25, 0x0C	; 12
    1608:	21 50       	subi	r18, 0x01	; 1
    160a:	80 40       	sbci	r24, 0x00	; 0
    160c:	90 40       	sbci	r25, 0x00	; 0
    160e:	e1 f7       	brne	.-8      	; 0x1608 <auto_authorization+0x70>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <auto_authorization+0x7a>
    1612:	00 00       	nop
				_delay_ms(4000);
				return true;
    1614:	81 e0       	ldi	r24, 0x01	; 1
			}
			else if (!(strcmp(raspberryData,"Anas")))
    1616:	e7 c0       	rjmp	.+462    	; 0x17e6 <auto_authorization+0x24e>
    1618:	6f e6       	ldi	r22, 0x6F	; 111
    161a:	75 e0       	ldi	r23, 0x05	; 5
    161c:	81 e3       	ldi	r24, 0x31	; 49
    161e:	96 e0       	ldi	r25, 0x06	; 6
    1620:	c4 d3       	rcall	.+1928   	; 0x1daa <strcmp>
    1622:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    1624:	31 f5       	brne	.+76     	; 0x1672 <auto_authorization+0xda>
    1626:	88 e4       	ldi	r24, 0x48	; 72
    1628:	95 e0       	ldi	r25, 0x05	; 5
    162a:	3a dd       	rcall	.-1420   	; 0x10a0 <UART0_sendString>
    162c:	2f e3       	ldi	r18, 0x3F	; 63
    162e:	82 e4       	ldi	r24, 0x42	; 66
    1630:	9f e0       	ldi	r25, 0x0F	; 15
    1632:	21 50       	subi	r18, 0x01	; 1
    1634:	80 40       	sbci	r24, 0x00	; 0
    1636:	90 40       	sbci	r25, 0x00	; 0
    1638:	e1 f7       	brne	.-8      	; 0x1632 <auto_authorization+0x9a>
    163a:	00 c0       	rjmp	.+0      	; 0x163c <auto_authorization+0xa4>
				_delay_ms(5000);
				UART0_sendString("q,Anas\n\r");
    163c:	00 00       	nop
    163e:	84 e7       	ldi	r24, 0x74	; 116
    1640:	95 e0       	ldi	r25, 0x05	; 5
    1642:	2e dd       	rcall	.-1444   	; 0x10a0 <UART0_sendString>
    1644:	2f e3       	ldi	r18, 0x3F	; 63
    1646:	82 e4       	ldi	r24, 0x42	; 66
    1648:	9f e0       	ldi	r25, 0x0F	; 15
    164a:	21 50       	subi	r18, 0x01	; 1
    164c:	80 40       	sbci	r24, 0x00	; 0
    164e:	90 40       	sbci	r25, 0x00	; 0
    1650:	e1 f7       	brne	.-8      	; 0x164a <auto_authorization+0xb2>
    1652:	00 c0       	rjmp	.+0      	; 0x1654 <auto_authorization+0xbc>
				_delay_ms(5000);
				UART3_sendString("Close_face\n\r");
    1654:	00 00       	nop
    1656:	8d e7       	ldi	r24, 0x7D	; 125
    1658:	95 e0       	ldi	r25, 0x05	; 5
    165a:	5b dd       	rcall	.-1354   	; 0x1112 <UART3_sendString>
    165c:	2f ef       	ldi	r18, 0xFF	; 255
    165e:	84 e3       	ldi	r24, 0x34	; 52
    1660:	9c e0       	ldi	r25, 0x0C	; 12
    1662:	21 50       	subi	r18, 0x01	; 1
    1664:	80 40       	sbci	r24, 0x00	; 0
    1666:	90 40       	sbci	r25, 0x00	; 0
    1668:	e1 f7       	brne	.-8      	; 0x1662 <auto_authorization+0xca>
    166a:	00 c0       	rjmp	.+0      	; 0x166c <auto_authorization+0xd4>
				_delay_ms(4000);
				return true;
    166c:	00 00       	nop
    166e:	81 e0       	ldi	r24, 0x01	; 1
			}
			else if (!(strcmp(raspberryData,"Gamal")))
    1670:	ba c0       	rjmp	.+372    	; 0x17e6 <auto_authorization+0x24e>
    1672:	6a e8       	ldi	r22, 0x8A	; 138
    1674:	75 e0       	ldi	r23, 0x05	; 5
    1676:	81 e3       	ldi	r24, 0x31	; 49
    1678:	96 e0       	ldi	r25, 0x06	; 6
    167a:	97 d3       	rcall	.+1838   	; 0x1daa <strcmp>
    167c:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    167e:	31 f5       	brne	.+76     	; 0x16cc <auto_authorization+0x134>
    1680:	88 e4       	ldi	r24, 0x48	; 72
    1682:	95 e0       	ldi	r25, 0x05	; 5
    1684:	0d dd       	rcall	.-1510   	; 0x10a0 <UART0_sendString>
    1686:	2f e3       	ldi	r18, 0x3F	; 63
    1688:	82 e4       	ldi	r24, 0x42	; 66
    168a:	9f e0       	ldi	r25, 0x0F	; 15
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	80 40       	sbci	r24, 0x00	; 0
    1690:	90 40       	sbci	r25, 0x00	; 0
    1692:	e1 f7       	brne	.-8      	; 0x168c <auto_authorization+0xf4>
    1694:	00 c0       	rjmp	.+0      	; 0x1696 <auto_authorization+0xfe>
				_delay_ms(5000);
				UART0_sendString("q,Gamal\n\r");
    1696:	00 00       	nop
    1698:	80 e9       	ldi	r24, 0x90	; 144
    169a:	95 e0       	ldi	r25, 0x05	; 5
    169c:	01 dd       	rcall	.-1534   	; 0x10a0 <UART0_sendString>
    169e:	2f e3       	ldi	r18, 0x3F	; 63
    16a0:	82 e4       	ldi	r24, 0x42	; 66
    16a2:	9f e0       	ldi	r25, 0x0F	; 15
    16a4:	21 50       	subi	r18, 0x01	; 1
    16a6:	80 40       	sbci	r24, 0x00	; 0
    16a8:	90 40       	sbci	r25, 0x00	; 0
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <auto_authorization+0x10c>
    16ac:	00 c0       	rjmp	.+0      	; 0x16ae <auto_authorization+0x116>
				_delay_ms(5000);
				UART3_sendString("Close_face\n\r");
    16ae:	00 00       	nop
    16b0:	8d e7       	ldi	r24, 0x7D	; 125
    16b2:	95 e0       	ldi	r25, 0x05	; 5
    16b4:	2e dd       	rcall	.-1444   	; 0x1112 <UART3_sendString>
    16b6:	2f ef       	ldi	r18, 0xFF	; 255
    16b8:	84 e3       	ldi	r24, 0x34	; 52
    16ba:	9c e0       	ldi	r25, 0x0C	; 12
    16bc:	21 50       	subi	r18, 0x01	; 1
    16be:	80 40       	sbci	r24, 0x00	; 0
    16c0:	90 40       	sbci	r25, 0x00	; 0
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <auto_authorization+0x124>
				_delay_ms(4000);
				return true;
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <auto_authorization+0x12e>
    16c6:	00 00       	nop
			}
			else if (!(strcmp(raspberryData,"Toka")))
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	8d c0       	rjmp	.+282    	; 0x17e6 <auto_authorization+0x24e>
    16cc:	6a e9       	ldi	r22, 0x9A	; 154
    16ce:	75 e0       	ldi	r23, 0x05	; 5
    16d0:	81 e3       	ldi	r24, 0x31	; 49
    16d2:	96 e0       	ldi	r25, 0x06	; 6
    16d4:	6a d3       	rcall	.+1748   	; 0x1daa <strcmp>
    16d6:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    16d8:	31 f5       	brne	.+76     	; 0x1726 <auto_authorization+0x18e>
    16da:	88 e4       	ldi	r24, 0x48	; 72
    16dc:	95 e0       	ldi	r25, 0x05	; 5
    16de:	e0 dc       	rcall	.-1600   	; 0x10a0 <UART0_sendString>
    16e0:	2f e3       	ldi	r18, 0x3F	; 63
    16e2:	82 e4       	ldi	r24, 0x42	; 66
    16e4:	9f e0       	ldi	r25, 0x0F	; 15
    16e6:	21 50       	subi	r18, 0x01	; 1
    16e8:	80 40       	sbci	r24, 0x00	; 0
    16ea:	90 40       	sbci	r25, 0x00	; 0
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <auto_authorization+0x14e>
				_delay_ms(5000);
				UART0_sendString("q,Toka\n\r");
    16ee:	00 c0       	rjmp	.+0      	; 0x16f0 <auto_authorization+0x158>
    16f0:	00 00       	nop
    16f2:	8f e9       	ldi	r24, 0x9F	; 159
    16f4:	95 e0       	ldi	r25, 0x05	; 5
    16f6:	d4 dc       	rcall	.-1624   	; 0x10a0 <UART0_sendString>
    16f8:	2f e3       	ldi	r18, 0x3F	; 63
    16fa:	82 e4       	ldi	r24, 0x42	; 66
    16fc:	9f e0       	ldi	r25, 0x0F	; 15
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	80 40       	sbci	r24, 0x00	; 0
    1702:	90 40       	sbci	r25, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <auto_authorization+0x166>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <auto_authorization+0x170>
				_delay_ms(5000);
				UART3_sendString("Close_face\n\r");
    1708:	00 00       	nop
    170a:	8d e7       	ldi	r24, 0x7D	; 125
    170c:	95 e0       	ldi	r25, 0x05	; 5
    170e:	01 dd       	rcall	.-1534   	; 0x1112 <UART3_sendString>
    1710:	2f ef       	ldi	r18, 0xFF	; 255
    1712:	84 e3       	ldi	r24, 0x34	; 52
    1714:	9c e0       	ldi	r25, 0x0C	; 12
    1716:	21 50       	subi	r18, 0x01	; 1
    1718:	80 40       	sbci	r24, 0x00	; 0
    171a:	90 40       	sbci	r25, 0x00	; 0
    171c:	e1 f7       	brne	.-8      	; 0x1716 <auto_authorization+0x17e>
				_delay_ms(4000);
				return true;
    171e:	00 c0       	rjmp	.+0      	; 0x1720 <auto_authorization+0x188>
    1720:	00 00       	nop
			}
			else if (!(strcmp(raspberryData,"Rawan")))
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	60 c0       	rjmp	.+192    	; 0x17e6 <auto_authorization+0x24e>
    1726:	68 ea       	ldi	r22, 0xA8	; 168
    1728:	75 e0       	ldi	r23, 0x05	; 5
    172a:	81 e3       	ldi	r24, 0x31	; 49
    172c:	96 e0       	ldi	r25, 0x06	; 6
    172e:	3d d3       	rcall	.+1658   	; 0x1daa <strcmp>
			{
				UART0_sendString("t,User verified\n\r");
    1730:	89 2b       	or	r24, r25
    1732:	31 f5       	brne	.+76     	; 0x1780 <auto_authorization+0x1e8>
    1734:	88 e4       	ldi	r24, 0x48	; 72
    1736:	95 e0       	ldi	r25, 0x05	; 5
    1738:	b3 dc       	rcall	.-1690   	; 0x10a0 <UART0_sendString>
    173a:	2f e3       	ldi	r18, 0x3F	; 63
    173c:	82 e4       	ldi	r24, 0x42	; 66
    173e:	9f e0       	ldi	r25, 0x0F	; 15
    1740:	21 50       	subi	r18, 0x01	; 1
    1742:	80 40       	sbci	r24, 0x00	; 0
    1744:	90 40       	sbci	r25, 0x00	; 0
    1746:	e1 f7       	brne	.-8      	; 0x1740 <auto_authorization+0x1a8>
				_delay_ms(5000);
				UART0_sendString("q,Rawan\n\r");
    1748:	00 c0       	rjmp	.+0      	; 0x174a <auto_authorization+0x1b2>
    174a:	00 00       	nop
    174c:	8e ea       	ldi	r24, 0xAE	; 174
    174e:	95 e0       	ldi	r25, 0x05	; 5
    1750:	a7 dc       	rcall	.-1714   	; 0x10a0 <UART0_sendString>
    1752:	2f e3       	ldi	r18, 0x3F	; 63
    1754:	82 e4       	ldi	r24, 0x42	; 66
    1756:	9f e0       	ldi	r25, 0x0F	; 15
    1758:	21 50       	subi	r18, 0x01	; 1
    175a:	80 40       	sbci	r24, 0x00	; 0
    175c:	90 40       	sbci	r25, 0x00	; 0
    175e:	e1 f7       	brne	.-8      	; 0x1758 <auto_authorization+0x1c0>
    1760:	00 c0       	rjmp	.+0      	; 0x1762 <auto_authorization+0x1ca>
				_delay_ms(5000);
				UART3_sendString("Close_face\n\r");
    1762:	00 00       	nop
    1764:	8d e7       	ldi	r24, 0x7D	; 125
    1766:	95 e0       	ldi	r25, 0x05	; 5
    1768:	d4 dc       	rcall	.-1624   	; 0x1112 <UART3_sendString>
    176a:	2f ef       	ldi	r18, 0xFF	; 255
    176c:	84 e3       	ldi	r24, 0x34	; 52
    176e:	9c e0       	ldi	r25, 0x0C	; 12
    1770:	21 50       	subi	r18, 0x01	; 1
    1772:	80 40       	sbci	r24, 0x00	; 0
    1774:	90 40       	sbci	r25, 0x00	; 0
    1776:	e1 f7       	brne	.-8      	; 0x1770 <auto_authorization+0x1d8>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <auto_authorization+0x1e2>
				_delay_ms(4000);
				return true;
    177a:	00 00       	nop
    177c:	81 e0       	ldi	r24, 0x01	; 1
	int count;
	_delay_ms(6000);
	UART3_sendString("Open_face\n\r");
	for (count=0;count<50;count++)
	{
		for (timer=0;timer<50000;timer++)  //counter to detect face
    177e:	33 c0       	rjmp	.+102    	; 0x17e6 <auto_authorization+0x24e>
    1780:	21 96       	adiw	r28, 0x01	; 1
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <auto_authorization+0x1f0>
    1784:	c0 e0       	ldi	r28, 0x00	; 0
    1786:	d0 e0       	ldi	r29, 0x00	; 0
    1788:	c0 35       	cpi	r28, 0x50	; 80
    178a:	23 ec       	ldi	r18, 0xC3	; 195
    178c:	d2 07       	cpc	r29, r18
{
	unsigned int timer;
	int count;
	_delay_ms(6000);
	UART3_sendString("Open_face\n\r");
	for (count=0;count<50;count++)
    178e:	08 f4       	brcc	.+2      	; 0x1792 <auto_authorization+0x1fa>
    1790:	16 cf       	rjmp	.-468    	; 0x15be <auto_authorization+0x26>
    1792:	0f 5f       	subi	r16, 0xFF	; 255
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	02 33       	cpi	r16, 0x32	; 50
				_delay_ms(4000);
				return true;
			}
		}
	}
	UART0_sendString("t,Face not Detected !\n\r");
    1798:	11 05       	cpc	r17, r1
    179a:	a4 f3       	brlt	.-24     	; 0x1784 <auto_authorization+0x1ec>
    179c:	88 eb       	ldi	r24, 0xB8	; 184
    179e:	95 e0       	ldi	r25, 0x05	; 5
    17a0:	7f dc       	rcall	.-1794   	; 0x10a0 <UART0_sendString>
    17a2:	8f e7       	ldi	r24, 0x7F	; 127
    17a4:	94 e8       	ldi	r25, 0x84	; 132
    17a6:	2e e1       	ldi	r18, 0x1E	; 30
    17a8:	81 50       	subi	r24, 0x01	; 1
    17aa:	90 40       	sbci	r25, 0x00	; 0
    17ac:	20 40       	sbci	r18, 0x00	; 0
    17ae:	e1 f7       	brne	.-8      	; 0x17a8 <auto_authorization+0x210>
	_delay_ms(10000);
	UART0_sendString("Enter code Manually !\n\r");
    17b0:	00 c0       	rjmp	.+0      	; 0x17b2 <auto_authorization+0x21a>
    17b2:	00 00       	nop
    17b4:	80 ed       	ldi	r24, 0xD0	; 208
    17b6:	95 e0       	ldi	r25, 0x05	; 5
    17b8:	73 dc       	rcall	.-1818   	; 0x10a0 <UART0_sendString>
    17ba:	8f e7       	ldi	r24, 0x7F	; 127
    17bc:	94 e8       	ldi	r25, 0x84	; 132
    17be:	2e e1       	ldi	r18, 0x1E	; 30
    17c0:	81 50       	subi	r24, 0x01	; 1
    17c2:	90 40       	sbci	r25, 0x00	; 0
    17c4:	20 40       	sbci	r18, 0x00	; 0
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <auto_authorization+0x228>
    17c8:	00 c0       	rjmp	.+0      	; 0x17ca <auto_authorization+0x232>
	_delay_ms(10000);
	UART3_sendString("Close_Face\n\r");
    17ca:	00 00       	nop
    17cc:	88 ee       	ldi	r24, 0xE8	; 232
    17ce:	95 e0       	ldi	r25, 0x05	; 5
    17d0:	a0 dc       	rcall	.-1728   	; 0x1112 <UART3_sendString>
    17d2:	8f e7       	ldi	r24, 0x7F	; 127
    17d4:	9f e4       	ldi	r25, 0x4F	; 79
    17d6:	22 e1       	ldi	r18, 0x12	; 18
    17d8:	81 50       	subi	r24, 0x01	; 1
    17da:	90 40       	sbci	r25, 0x00	; 0
    17dc:	20 40       	sbci	r18, 0x00	; 0
    17de:	e1 f7       	brne	.-8      	; 0x17d8 <auto_authorization+0x240>
    17e0:	00 c0       	rjmp	.+0      	; 0x17e2 <auto_authorization+0x24a>
    17e2:	00 00       	nop
	_delay_ms(6000);
	return false;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
}
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	08 95       	ret

000017f0 <manual_authorization>:

bool manual_authorization()
{
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
	unsigned int timer;
	int count;
	for (count=0;count<20;count++)
    17f8:	00 e0       	ldi	r16, 0x00	; 0
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	ab c0       	rjmp	.+342    	; 0x1954 <manual_authorization+0x164>
	{
		for (timer=0;timer<50000;timer++)  //counter to detect face
		{
			if (!(strcmp(receivedData,"6752")))
    17fe:	65 ef       	ldi	r22, 0xF5	; 245
    1800:	75 e0       	ldi	r23, 0x05	; 5
    1802:	8b e3       	ldi	r24, 0x3B	; 59
    1804:	96 e0       	ldi	r25, 0x06	; 6
    1806:	d1 d2       	rcall	.+1442   	; 0x1daa <strcmp>
    1808:	89 2b       	or	r24, r25
    180a:	c9 f4       	brne	.+50     	; 0x183e <manual_authorization+0x4e>
			{
				UART0_sendString("t,User verified\n\r");
    180c:	88 e4       	ldi	r24, 0x48	; 72
    180e:	95 e0       	ldi	r25, 0x05	; 5
    1810:	47 dc       	rcall	.-1906   	; 0x10a0 <UART0_sendString>
    1812:	2f ef       	ldi	r18, 0xFF	; 255
    1814:	84 e3       	ldi	r24, 0x34	; 52
    1816:	9c e0       	ldi	r25, 0x0C	; 12
    1818:	21 50       	subi	r18, 0x01	; 1
    181a:	80 40       	sbci	r24, 0x00	; 0
    181c:	90 40       	sbci	r25, 0x00	; 0
    181e:	e1 f7       	brne	.-8      	; 0x1818 <manual_authorization+0x28>
    1820:	00 c0       	rjmp	.+0      	; 0x1822 <manual_authorization+0x32>
    1822:	00 00       	nop
				_delay_ms(4000);
				UART0_sendString("q,Ahmed\n\r");
    1824:	8a e5       	ldi	r24, 0x5A	; 90
    1826:	95 e0       	ldi	r25, 0x05	; 5
    1828:	3b dc       	rcall	.-1930   	; 0x10a0 <UART0_sendString>
    182a:	2f ef       	ldi	r18, 0xFF	; 255
    182c:	84 e3       	ldi	r24, 0x34	; 52
    182e:	9c e0       	ldi	r25, 0x0C	; 12
    1830:	21 50       	subi	r18, 0x01	; 1
    1832:	80 40       	sbci	r24, 0x00	; 0
    1834:	90 40       	sbci	r25, 0x00	; 0
    1836:	e1 f7       	brne	.-8      	; 0x1830 <manual_authorization+0x40>
    1838:	00 c0       	rjmp	.+0      	; 0x183a <manual_authorization+0x4a>
    183a:	00 00       	nop
				_delay_ms(4000);
				return true;
    183c:	a7 c0       	rjmp	.+334    	; 0x198c <manual_authorization+0x19c>
			}
			else if (!(strcmp(receivedData,"2874")))
    183e:	6a ef       	ldi	r22, 0xFA	; 250
    1840:	75 e0       	ldi	r23, 0x05	; 5
    1842:	8b e3       	ldi	r24, 0x3B	; 59
    1844:	96 e0       	ldi	r25, 0x06	; 6
    1846:	b1 d2       	rcall	.+1378   	; 0x1daa <strcmp>
    1848:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    184a:	c9 f4       	brne	.+50     	; 0x187e <manual_authorization+0x8e>
    184c:	88 e4       	ldi	r24, 0x48	; 72
    184e:	95 e0       	ldi	r25, 0x05	; 5
    1850:	27 dc       	rcall	.-1970   	; 0x10a0 <UART0_sendString>
    1852:	2f ef       	ldi	r18, 0xFF	; 255
    1854:	84 e3       	ldi	r24, 0x34	; 52
    1856:	9c e0       	ldi	r25, 0x0C	; 12
    1858:	21 50       	subi	r18, 0x01	; 1
    185a:	80 40       	sbci	r24, 0x00	; 0
    185c:	90 40       	sbci	r25, 0x00	; 0
    185e:	e1 f7       	brne	.-8      	; 0x1858 <manual_authorization+0x68>
    1860:	00 c0       	rjmp	.+0      	; 0x1862 <manual_authorization+0x72>
				_delay_ms(4000);
				UART0_sendString("q,Anas\n\r");
    1862:	00 00       	nop
    1864:	84 e7       	ldi	r24, 0x74	; 116
    1866:	95 e0       	ldi	r25, 0x05	; 5
    1868:	1b dc       	rcall	.-1994   	; 0x10a0 <UART0_sendString>
    186a:	2f ef       	ldi	r18, 0xFF	; 255
    186c:	84 e3       	ldi	r24, 0x34	; 52
    186e:	9c e0       	ldi	r25, 0x0C	; 12
    1870:	21 50       	subi	r18, 0x01	; 1
    1872:	80 40       	sbci	r24, 0x00	; 0
    1874:	90 40       	sbci	r25, 0x00	; 0
    1876:	e1 f7       	brne	.-8      	; 0x1870 <manual_authorization+0x80>
    1878:	00 c0       	rjmp	.+0      	; 0x187a <manual_authorization+0x8a>
				_delay_ms(4000);
				return true;
    187a:	00 00       	nop
			}
			else if (!(strcmp(receivedData,"1436")))
    187c:	87 c0       	rjmp	.+270    	; 0x198c <manual_authorization+0x19c>
    187e:	6f ef       	ldi	r22, 0xFF	; 255
    1880:	75 e0       	ldi	r23, 0x05	; 5
    1882:	8b e3       	ldi	r24, 0x3B	; 59
    1884:	96 e0       	ldi	r25, 0x06	; 6
    1886:	91 d2       	rcall	.+1314   	; 0x1daa <strcmp>
    1888:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    188a:	c9 f4       	brne	.+50     	; 0x18be <manual_authorization+0xce>
    188c:	88 e4       	ldi	r24, 0x48	; 72
    188e:	95 e0       	ldi	r25, 0x05	; 5
    1890:	07 dc       	rcall	.-2034   	; 0x10a0 <UART0_sendString>
    1892:	2f ef       	ldi	r18, 0xFF	; 255
    1894:	84 e3       	ldi	r24, 0x34	; 52
    1896:	9c e0       	ldi	r25, 0x0C	; 12
    1898:	21 50       	subi	r18, 0x01	; 1
    189a:	80 40       	sbci	r24, 0x00	; 0
    189c:	90 40       	sbci	r25, 0x00	; 0
    189e:	e1 f7       	brne	.-8      	; 0x1898 <manual_authorization+0xa8>
    18a0:	00 c0       	rjmp	.+0      	; 0x18a2 <manual_authorization+0xb2>
				_delay_ms(4000);
				UART0_sendString("q,Gamal\n\r");
    18a2:	00 00       	nop
    18a4:	80 e9       	ldi	r24, 0x90	; 144
    18a6:	95 e0       	ldi	r25, 0x05	; 5
    18a8:	fb db       	rcall	.-2058   	; 0x10a0 <UART0_sendString>
    18aa:	2f ef       	ldi	r18, 0xFF	; 255
    18ac:	84 e3       	ldi	r24, 0x34	; 52
    18ae:	9c e0       	ldi	r25, 0x0C	; 12
    18b0:	21 50       	subi	r18, 0x01	; 1
    18b2:	80 40       	sbci	r24, 0x00	; 0
    18b4:	90 40       	sbci	r25, 0x00	; 0
    18b6:	e1 f7       	brne	.-8      	; 0x18b0 <manual_authorization+0xc0>
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <manual_authorization+0xca>
				_delay_ms(4000);
				return true;
    18ba:	00 00       	nop
			}
			else if (!(strcmp(receivedData,"4763")))
    18bc:	67 c0       	rjmp	.+206    	; 0x198c <manual_authorization+0x19c>
    18be:	64 e0       	ldi	r22, 0x04	; 4
    18c0:	76 e0       	ldi	r23, 0x06	; 6
    18c2:	8b e3       	ldi	r24, 0x3B	; 59
    18c4:	96 e0       	ldi	r25, 0x06	; 6
    18c6:	71 d2       	rcall	.+1250   	; 0x1daa <strcmp>
    18c8:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    18ca:	c9 f4       	brne	.+50     	; 0x18fe <manual_authorization+0x10e>
    18cc:	88 e4       	ldi	r24, 0x48	; 72
    18ce:	95 e0       	ldi	r25, 0x05	; 5
    18d0:	e7 db       	rcall	.-2098   	; 0x10a0 <UART0_sendString>
    18d2:	2f ef       	ldi	r18, 0xFF	; 255
    18d4:	84 e3       	ldi	r24, 0x34	; 52
    18d6:	9c e0       	ldi	r25, 0x0C	; 12
    18d8:	21 50       	subi	r18, 0x01	; 1
    18da:	80 40       	sbci	r24, 0x00	; 0
    18dc:	90 40       	sbci	r25, 0x00	; 0
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <manual_authorization+0xe8>
    18e0:	00 c0       	rjmp	.+0      	; 0x18e2 <manual_authorization+0xf2>
				_delay_ms(4000);
				UART0_sendString("q,Toka\n\r");
    18e2:	00 00       	nop
    18e4:	8f e9       	ldi	r24, 0x9F	; 159
    18e6:	95 e0       	ldi	r25, 0x05	; 5
    18e8:	db db       	rcall	.-2122   	; 0x10a0 <UART0_sendString>
    18ea:	2f ef       	ldi	r18, 0xFF	; 255
    18ec:	84 e3       	ldi	r24, 0x34	; 52
    18ee:	9c e0       	ldi	r25, 0x0C	; 12
    18f0:	21 50       	subi	r18, 0x01	; 1
    18f2:	80 40       	sbci	r24, 0x00	; 0
    18f4:	90 40       	sbci	r25, 0x00	; 0
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <manual_authorization+0x100>
				_delay_ms(4000);
				return true;
    18f8:	00 c0       	rjmp	.+0      	; 0x18fa <manual_authorization+0x10a>
			}
			else if (!(strcmp(receivedData,"9615")))
    18fa:	00 00       	nop
    18fc:	47 c0       	rjmp	.+142    	; 0x198c <manual_authorization+0x19c>
    18fe:	69 e0       	ldi	r22, 0x09	; 9
    1900:	76 e0       	ldi	r23, 0x06	; 6
    1902:	8b e3       	ldi	r24, 0x3B	; 59
    1904:	96 e0       	ldi	r25, 0x06	; 6
    1906:	51 d2       	rcall	.+1186   	; 0x1daa <strcmp>
    1908:	89 2b       	or	r24, r25
			{
				UART0_sendString("t,User verified\n\r");
    190a:	c9 f4       	brne	.+50     	; 0x193e <manual_authorization+0x14e>
    190c:	88 e4       	ldi	r24, 0x48	; 72
    190e:	95 e0       	ldi	r25, 0x05	; 5
    1910:	c7 db       	rcall	.-2162   	; 0x10a0 <UART0_sendString>
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	84 e3       	ldi	r24, 0x34	; 52
    1916:	9c e0       	ldi	r25, 0x0C	; 12
    1918:	21 50       	subi	r18, 0x01	; 1
    191a:	80 40       	sbci	r24, 0x00	; 0
    191c:	90 40       	sbci	r25, 0x00	; 0
    191e:	e1 f7       	brne	.-8      	; 0x1918 <manual_authorization+0x128>
    1920:	00 c0       	rjmp	.+0      	; 0x1922 <manual_authorization+0x132>
				_delay_ms(4000);
				UART0_sendString("q,Rawan\n\r");
    1922:	00 00       	nop
    1924:	8e ea       	ldi	r24, 0xAE	; 174
    1926:	95 e0       	ldi	r25, 0x05	; 5
    1928:	bb db       	rcall	.-2186   	; 0x10a0 <UART0_sendString>
    192a:	2f ef       	ldi	r18, 0xFF	; 255
    192c:	84 e3       	ldi	r24, 0x34	; 52
    192e:	9c e0       	ldi	r25, 0x0C	; 12
    1930:	21 50       	subi	r18, 0x01	; 1
    1932:	80 40       	sbci	r24, 0x00	; 0
    1934:	90 40       	sbci	r25, 0x00	; 0
    1936:	e1 f7       	brne	.-8      	; 0x1930 <manual_authorization+0x140>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <manual_authorization+0x14a>
    193a:	00 00       	nop
				_delay_ms(4000);
				return true;
    193c:	27 c0       	rjmp	.+78     	; 0x198c <manual_authorization+0x19c>
{
	unsigned int timer;
	int count;
	for (count=0;count<20;count++)
	{
		for (timer=0;timer<50000;timer++)  //counter to detect face
    193e:	21 96       	adiw	r28, 0x01	; 1
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <manual_authorization+0x156>
    1942:	c0 e0       	ldi	r28, 0x00	; 0
    1944:	d0 e0       	ldi	r29, 0x00	; 0
    1946:	c0 35       	cpi	r28, 0x50	; 80
    1948:	23 ec       	ldi	r18, 0xC3	; 195
    194a:	d2 07       	cpc	r29, r18
    194c:	08 f4       	brcc	.+2      	; 0x1950 <manual_authorization+0x160>

bool manual_authorization()
{
	unsigned int timer;
	int count;
	for (count=0;count<20;count++)
    194e:	57 cf       	rjmp	.-338    	; 0x17fe <manual_authorization+0xe>
    1950:	0f 5f       	subi	r16, 0xFF	; 255
    1952:	1f 4f       	sbci	r17, 0xFF	; 255
    1954:	04 31       	cpi	r16, 0x14	; 20
			}
		}
	}
	

	UART0_sendString("t,Face not Detected !\n\r");
    1956:	11 05       	cpc	r17, r1
    1958:	a4 f3       	brlt	.-24     	; 0x1942 <manual_authorization+0x152>
    195a:	88 eb       	ldi	r24, 0xB8	; 184
    195c:	95 e0       	ldi	r25, 0x05	; 5
    195e:	a0 db       	rcall	.-2240   	; 0x10a0 <UART0_sendString>
    1960:	8f e7       	ldi	r24, 0x7F	; 127
    1962:	94 e8       	ldi	r25, 0x84	; 132
    1964:	2e e1       	ldi	r18, 0x1E	; 30
    1966:	81 50       	subi	r24, 0x01	; 1
    1968:	90 40       	sbci	r25, 0x00	; 0
    196a:	20 40       	sbci	r18, 0x00	; 0
    196c:	e1 f7       	brne	.-8      	; 0x1966 <manual_authorization+0x176>
    196e:	00 c0       	rjmp	.+0      	; 0x1970 <manual_authorization+0x180>
	_delay_ms(10000);
	UART0_sendString("Car Blocked !\n\r");
    1970:	00 00       	nop
    1972:	8e e0       	ldi	r24, 0x0E	; 14
    1974:	96 e0       	ldi	r25, 0x06	; 6
    1976:	94 db       	rcall	.-2264   	; 0x10a0 <UART0_sendString>
    1978:	8f e7       	ldi	r24, 0x7F	; 127
    197a:	9a e1       	ldi	r25, 0x1A	; 26
    197c:	26 e0       	ldi	r18, 0x06	; 6
    197e:	81 50       	subi	r24, 0x01	; 1
    1980:	90 40       	sbci	r25, 0x00	; 0
    1982:	20 40       	sbci	r18, 0x00	; 0
    1984:	e1 f7       	brne	.-8      	; 0x197e <manual_authorization+0x18e>
    1986:	00 c0       	rjmp	.+0      	; 0x1988 <manual_authorization+0x198>
    1988:	00 00       	nop
    198a:	ff cf       	rjmp	.-2      	; 0x198a <manual_authorization+0x19a>
	{
		;
	}
	return false;
	
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <Verify_App>:
void Verify_App()
{
	bool ras_check;
	bool auto_detect;
	
	ras_check=raspi_check();
    1998:	47 dd       	rcall	.-1394   	; 0x1428 <raspi_check>
	if (ras_check==true)
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	89 f4       	brne	.+34     	; 0x19c0 <Verify_App+0x28>
	{
		UART0_sendString("r\n\r");
    199e:	8e e2       	ldi	r24, 0x2E	; 46
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	7e db       	rcall	.-2308   	; 0x10a0 <UART0_sendString>
    19a4:	2f ed       	ldi	r18, 0xDF	; 223
    19a6:	83 e9       	ldi	r24, 0x93	; 147
    19a8:	94 e0       	ldi	r25, 0x04	; 4
    19aa:	21 50       	subi	r18, 0x01	; 1
    19ac:	80 40       	sbci	r24, 0x00	; 0
    19ae:	90 40       	sbci	r25, 0x00	; 0
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <Verify_App+0x12>
    19b2:	00 c0       	rjmp	.+0      	; 0x19b4 <Verify_App+0x1c>
		_delay_ms(1500);
		auto_detect=auto_authorization();
    19b4:	00 00       	nop
		if (auto_detect==false)
    19b6:	f0 dd       	rcall	.-1056   	; 0x1598 <auto_authorization>
    19b8:	81 11       	cpse	r24, r1
		{
			manual_authorization();
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <Verify_App+0x2e>
    19bc:	19 cf       	rjmp	.-462    	; 0x17f0 <manual_authorization>
		}
	}
	else if(ras_check==false)
    19be:	08 95       	ret
    19c0:	81 11       	cpse	r24, r1
	{
		manual_authorization();
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <Verify_App+0x2e>
    19c4:	15 cf       	rjmp	.-470    	; 0x17f0 <manual_authorization>
    19c6:	08 95       	ret

000019c8 <__divsf3>:
    19c8:	0c d0       	rcall	.+24     	; 0x19e2 <__divsf3x>
    19ca:	eb c0       	rjmp	.+470    	; 0x1ba2 <__fp_round>
    19cc:	e3 d0       	rcall	.+454    	; 0x1b94 <__fp_pscB>
    19ce:	40 f0       	brcs	.+16     	; 0x19e0 <__divsf3+0x18>
    19d0:	da d0       	rcall	.+436    	; 0x1b86 <__fp_pscA>
    19d2:	30 f0       	brcs	.+12     	; 0x19e0 <__divsf3+0x18>
    19d4:	21 f4       	brne	.+8      	; 0x19de <__divsf3+0x16>
    19d6:	5f 3f       	cpi	r21, 0xFF	; 255
    19d8:	19 f0       	breq	.+6      	; 0x19e0 <__divsf3+0x18>
    19da:	cc c0       	rjmp	.+408    	; 0x1b74 <__fp_inf>
    19dc:	51 11       	cpse	r21, r1
    19de:	15 c1       	rjmp	.+554    	; 0x1c0a <__fp_szero>
    19e0:	cf c0       	rjmp	.+414    	; 0x1b80 <__fp_nan>

000019e2 <__divsf3x>:
    19e2:	f0 d0       	rcall	.+480    	; 0x1bc4 <__fp_split3>
    19e4:	98 f3       	brcs	.-26     	; 0x19cc <__divsf3+0x4>

000019e6 <__divsf3_pse>:
    19e6:	99 23       	and	r25, r25
    19e8:	c9 f3       	breq	.-14     	; 0x19dc <__divsf3+0x14>
    19ea:	55 23       	and	r21, r21
    19ec:	b1 f3       	breq	.-20     	; 0x19da <__divsf3+0x12>
    19ee:	95 1b       	sub	r25, r21
    19f0:	55 0b       	sbc	r21, r21
    19f2:	bb 27       	eor	r27, r27
    19f4:	aa 27       	eor	r26, r26
    19f6:	62 17       	cp	r22, r18
    19f8:	73 07       	cpc	r23, r19
    19fa:	84 07       	cpc	r24, r20
    19fc:	38 f0       	brcs	.+14     	; 0x1a0c <__divsf3_pse+0x26>
    19fe:	9f 5f       	subi	r25, 0xFF	; 255
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	44 1f       	adc	r20, r20
    1a08:	aa 1f       	adc	r26, r26
    1a0a:	a9 f3       	breq	.-22     	; 0x19f6 <__divsf3_pse+0x10>
    1a0c:	33 d0       	rcall	.+102    	; 0x1a74 <__divsf3_pse+0x8e>
    1a0e:	0e 2e       	mov	r0, r30
    1a10:	3a f0       	brmi	.+14     	; 0x1a20 <__divsf3_pse+0x3a>
    1a12:	e0 e8       	ldi	r30, 0x80	; 128
    1a14:	30 d0       	rcall	.+96     	; 0x1a76 <__divsf3_pse+0x90>
    1a16:	91 50       	subi	r25, 0x01	; 1
    1a18:	50 40       	sbci	r21, 0x00	; 0
    1a1a:	e6 95       	lsr	r30
    1a1c:	00 1c       	adc	r0, r0
    1a1e:	ca f7       	brpl	.-14     	; 0x1a12 <__divsf3_pse+0x2c>
    1a20:	29 d0       	rcall	.+82     	; 0x1a74 <__divsf3_pse+0x8e>
    1a22:	fe 2f       	mov	r31, r30
    1a24:	27 d0       	rcall	.+78     	; 0x1a74 <__divsf3_pse+0x8e>
    1a26:	66 0f       	add	r22, r22
    1a28:	77 1f       	adc	r23, r23
    1a2a:	88 1f       	adc	r24, r24
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	26 17       	cp	r18, r22
    1a30:	37 07       	cpc	r19, r23
    1a32:	48 07       	cpc	r20, r24
    1a34:	ab 07       	cpc	r26, r27
    1a36:	b0 e8       	ldi	r27, 0x80	; 128
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <__divsf3_pse+0x56>
    1a3a:	bb 0b       	sbc	r27, r27
    1a3c:	80 2d       	mov	r24, r0
    1a3e:	bf 01       	movw	r22, r30
    1a40:	ff 27       	eor	r31, r31
    1a42:	93 58       	subi	r25, 0x83	; 131
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	2a f0       	brmi	.+10     	; 0x1a52 <__divsf3_pse+0x6c>
    1a48:	9e 3f       	cpi	r25, 0xFE	; 254
    1a4a:	51 05       	cpc	r21, r1
    1a4c:	68 f0       	brcs	.+26     	; 0x1a68 <__divsf3_pse+0x82>
    1a4e:	92 c0       	rjmp	.+292    	; 0x1b74 <__fp_inf>
    1a50:	dc c0       	rjmp	.+440    	; 0x1c0a <__fp_szero>
    1a52:	5f 3f       	cpi	r21, 0xFF	; 255
    1a54:	ec f3       	brlt	.-6      	; 0x1a50 <__divsf3_pse+0x6a>
    1a56:	98 3e       	cpi	r25, 0xE8	; 232
    1a58:	dc f3       	brlt	.-10     	; 0x1a50 <__divsf3_pse+0x6a>
    1a5a:	86 95       	lsr	r24
    1a5c:	77 95       	ror	r23
    1a5e:	67 95       	ror	r22
    1a60:	b7 95       	ror	r27
    1a62:	f7 95       	ror	r31
    1a64:	9f 5f       	subi	r25, 0xFF	; 255
    1a66:	c9 f7       	brne	.-14     	; 0x1a5a <__divsf3_pse+0x74>
    1a68:	88 0f       	add	r24, r24
    1a6a:	91 1d       	adc	r25, r1
    1a6c:	96 95       	lsr	r25
    1a6e:	87 95       	ror	r24
    1a70:	97 f9       	bld	r25, 7
    1a72:	08 95       	ret
    1a74:	e1 e0       	ldi	r30, 0x01	; 1
    1a76:	66 0f       	add	r22, r22
    1a78:	77 1f       	adc	r23, r23
    1a7a:	88 1f       	adc	r24, r24
    1a7c:	bb 1f       	adc	r27, r27
    1a7e:	62 17       	cp	r22, r18
    1a80:	73 07       	cpc	r23, r19
    1a82:	84 07       	cpc	r24, r20
    1a84:	ba 07       	cpc	r27, r26
    1a86:	20 f0       	brcs	.+8      	; 0x1a90 <__divsf3_pse+0xaa>
    1a88:	62 1b       	sub	r22, r18
    1a8a:	73 0b       	sbc	r23, r19
    1a8c:	84 0b       	sbc	r24, r20
    1a8e:	ba 0b       	sbc	r27, r26
    1a90:	ee 1f       	adc	r30, r30
    1a92:	88 f7       	brcc	.-30     	; 0x1a76 <__divsf3_pse+0x90>
    1a94:	e0 95       	com	r30
    1a96:	08 95       	ret

00001a98 <__fixsfsi>:
    1a98:	04 d0       	rcall	.+8      	; 0x1aa2 <__fixunssfsi>
    1a9a:	68 94       	set
    1a9c:	b1 11       	cpse	r27, r1
    1a9e:	b5 c0       	rjmp	.+362    	; 0x1c0a <__fp_szero>
    1aa0:	08 95       	ret

00001aa2 <__fixunssfsi>:
    1aa2:	98 d0       	rcall	.+304    	; 0x1bd4 <__fp_splitA>
    1aa4:	88 f0       	brcs	.+34     	; 0x1ac8 <__fixunssfsi+0x26>
    1aa6:	9f 57       	subi	r25, 0x7F	; 127
    1aa8:	90 f0       	brcs	.+36     	; 0x1ace <__fixunssfsi+0x2c>
    1aaa:	b9 2f       	mov	r27, r25
    1aac:	99 27       	eor	r25, r25
    1aae:	b7 51       	subi	r27, 0x17	; 23
    1ab0:	a0 f0       	brcs	.+40     	; 0x1ada <__fixunssfsi+0x38>
    1ab2:	d1 f0       	breq	.+52     	; 0x1ae8 <__fixunssfsi+0x46>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	1a f0       	brmi	.+6      	; 0x1ac4 <__fixunssfsi+0x22>
    1abe:	ba 95       	dec	r27
    1ac0:	c9 f7       	brne	.-14     	; 0x1ab4 <__fixunssfsi+0x12>
    1ac2:	12 c0       	rjmp	.+36     	; 0x1ae8 <__fixunssfsi+0x46>
    1ac4:	b1 30       	cpi	r27, 0x01	; 1
    1ac6:	81 f0       	breq	.+32     	; 0x1ae8 <__fixunssfsi+0x46>
    1ac8:	9f d0       	rcall	.+318    	; 0x1c08 <__fp_zero>
    1aca:	b1 e0       	ldi	r27, 0x01	; 1
    1acc:	08 95       	ret
    1ace:	9c c0       	rjmp	.+312    	; 0x1c08 <__fp_zero>
    1ad0:	67 2f       	mov	r22, r23
    1ad2:	78 2f       	mov	r23, r24
    1ad4:	88 27       	eor	r24, r24
    1ad6:	b8 5f       	subi	r27, 0xF8	; 248
    1ad8:	39 f0       	breq	.+14     	; 0x1ae8 <__fixunssfsi+0x46>
    1ada:	b9 3f       	cpi	r27, 0xF9	; 249
    1adc:	cc f3       	brlt	.-14     	; 0x1ad0 <__fixunssfsi+0x2e>
    1ade:	86 95       	lsr	r24
    1ae0:	77 95       	ror	r23
    1ae2:	67 95       	ror	r22
    1ae4:	b3 95       	inc	r27
    1ae6:	d9 f7       	brne	.-10     	; 0x1ade <__fixunssfsi+0x3c>
    1ae8:	3e f4       	brtc	.+14     	; 0x1af8 <__fixunssfsi+0x56>
    1aea:	90 95       	com	r25
    1aec:	80 95       	com	r24
    1aee:	70 95       	com	r23
    1af0:	61 95       	neg	r22
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	8f 4f       	sbci	r24, 0xFF	; 255
    1af6:	9f 4f       	sbci	r25, 0xFF	; 255
    1af8:	08 95       	ret

00001afa <__floatunsisf>:
    1afa:	e8 94       	clt
    1afc:	09 c0       	rjmp	.+18     	; 0x1b10 <__floatsisf+0x12>

00001afe <__floatsisf>:
    1afe:	97 fb       	bst	r25, 7
    1b00:	3e f4       	brtc	.+14     	; 0x1b10 <__floatsisf+0x12>
    1b02:	90 95       	com	r25
    1b04:	80 95       	com	r24
    1b06:	70 95       	com	r23
    1b08:	61 95       	neg	r22
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b10:	99 23       	and	r25, r25
    1b12:	a9 f0       	breq	.+42     	; 0x1b3e <__floatsisf+0x40>
    1b14:	f9 2f       	mov	r31, r25
    1b16:	96 e9       	ldi	r25, 0x96	; 150
    1b18:	bb 27       	eor	r27, r27
    1b1a:	93 95       	inc	r25
    1b1c:	f6 95       	lsr	r31
    1b1e:	87 95       	ror	r24
    1b20:	77 95       	ror	r23
    1b22:	67 95       	ror	r22
    1b24:	b7 95       	ror	r27
    1b26:	f1 11       	cpse	r31, r1
    1b28:	f8 cf       	rjmp	.-16     	; 0x1b1a <__floatsisf+0x1c>
    1b2a:	fa f4       	brpl	.+62     	; 0x1b6a <__floatsisf+0x6c>
    1b2c:	bb 0f       	add	r27, r27
    1b2e:	11 f4       	brne	.+4      	; 0x1b34 <__floatsisf+0x36>
    1b30:	60 ff       	sbrs	r22, 0
    1b32:	1b c0       	rjmp	.+54     	; 0x1b6a <__floatsisf+0x6c>
    1b34:	6f 5f       	subi	r22, 0xFF	; 255
    1b36:	7f 4f       	sbci	r23, 0xFF	; 255
    1b38:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	16 c0       	rjmp	.+44     	; 0x1b6a <__floatsisf+0x6c>
    1b3e:	88 23       	and	r24, r24
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <__floatsisf+0x48>
    1b42:	96 e9       	ldi	r25, 0x96	; 150
    1b44:	11 c0       	rjmp	.+34     	; 0x1b68 <__floatsisf+0x6a>
    1b46:	77 23       	and	r23, r23
    1b48:	21 f0       	breq	.+8      	; 0x1b52 <__floatsisf+0x54>
    1b4a:	9e e8       	ldi	r25, 0x8E	; 142
    1b4c:	87 2f       	mov	r24, r23
    1b4e:	76 2f       	mov	r23, r22
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <__floatsisf+0x5e>
    1b52:	66 23       	and	r22, r22
    1b54:	71 f0       	breq	.+28     	; 0x1b72 <__floatsisf+0x74>
    1b56:	96 e8       	ldi	r25, 0x86	; 134
    1b58:	86 2f       	mov	r24, r22
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	2a f0       	brmi	.+10     	; 0x1b6a <__floatsisf+0x6c>
    1b60:	9a 95       	dec	r25
    1b62:	66 0f       	add	r22, r22
    1b64:	77 1f       	adc	r23, r23
    1b66:	88 1f       	adc	r24, r24
    1b68:	da f7       	brpl	.-10     	; 0x1b60 <__floatsisf+0x62>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	97 f9       	bld	r25, 7
    1b72:	08 95       	ret

00001b74 <__fp_inf>:
    1b74:	97 f9       	bld	r25, 7
    1b76:	9f 67       	ori	r25, 0x7F	; 127
    1b78:	80 e8       	ldi	r24, 0x80	; 128
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	08 95       	ret

00001b80 <__fp_nan>:
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	80 ec       	ldi	r24, 0xC0	; 192
    1b84:	08 95       	ret

00001b86 <__fp_pscA>:
    1b86:	00 24       	eor	r0, r0
    1b88:	0a 94       	dec	r0
    1b8a:	16 16       	cp	r1, r22
    1b8c:	17 06       	cpc	r1, r23
    1b8e:	18 06       	cpc	r1, r24
    1b90:	09 06       	cpc	r0, r25
    1b92:	08 95       	ret

00001b94 <__fp_pscB>:
    1b94:	00 24       	eor	r0, r0
    1b96:	0a 94       	dec	r0
    1b98:	12 16       	cp	r1, r18
    1b9a:	13 06       	cpc	r1, r19
    1b9c:	14 06       	cpc	r1, r20
    1b9e:	05 06       	cpc	r0, r21
    1ba0:	08 95       	ret

00001ba2 <__fp_round>:
    1ba2:	09 2e       	mov	r0, r25
    1ba4:	03 94       	inc	r0
    1ba6:	00 0c       	add	r0, r0
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__fp_round+0xc>
    1baa:	88 23       	and	r24, r24
    1bac:	52 f0       	brmi	.+20     	; 0x1bc2 <__fp_round+0x20>
    1bae:	bb 0f       	add	r27, r27
    1bb0:	40 f4       	brcc	.+16     	; 0x1bc2 <__fp_round+0x20>
    1bb2:	bf 2b       	or	r27, r31
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <__fp_round+0x18>
    1bb6:	60 ff       	sbrs	r22, 0
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <__fp_round+0x20>
    1bba:	6f 5f       	subi	r22, 0xFF	; 255
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc2:	08 95       	ret

00001bc4 <__fp_split3>:
    1bc4:	57 fd       	sbrc	r21, 7
    1bc6:	90 58       	subi	r25, 0x80	; 128
    1bc8:	44 0f       	add	r20, r20
    1bca:	55 1f       	adc	r21, r21
    1bcc:	59 f0       	breq	.+22     	; 0x1be4 <__fp_splitA+0x10>
    1bce:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd0:	71 f0       	breq	.+28     	; 0x1bee <__fp_splitA+0x1a>
    1bd2:	47 95       	ror	r20

00001bd4 <__fp_splitA>:
    1bd4:	88 0f       	add	r24, r24
    1bd6:	97 fb       	bst	r25, 7
    1bd8:	99 1f       	adc	r25, r25
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <__fp_splitA+0x20>
    1bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1bde:	79 f0       	breq	.+30     	; 0x1bfe <__fp_splitA+0x2a>
    1be0:	87 95       	ror	r24
    1be2:	08 95       	ret
    1be4:	12 16       	cp	r1, r18
    1be6:	13 06       	cpc	r1, r19
    1be8:	14 06       	cpc	r1, r20
    1bea:	55 1f       	adc	r21, r21
    1bec:	f2 cf       	rjmp	.-28     	; 0x1bd2 <__fp_split3+0xe>
    1bee:	46 95       	lsr	r20
    1bf0:	f1 df       	rcall	.-30     	; 0x1bd4 <__fp_splitA>
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <__fp_splitA+0x30>
    1bf4:	16 16       	cp	r1, r22
    1bf6:	17 06       	cpc	r1, r23
    1bf8:	18 06       	cpc	r1, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	f1 cf       	rjmp	.-30     	; 0x1be0 <__fp_splitA+0xc>
    1bfe:	86 95       	lsr	r24
    1c00:	71 05       	cpc	r23, r1
    1c02:	61 05       	cpc	r22, r1
    1c04:	08 94       	sec
    1c06:	08 95       	ret

00001c08 <__fp_zero>:
    1c08:	e8 94       	clt

00001c0a <__fp_szero>:
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	66 27       	eor	r22, r22
    1c0e:	77 27       	eor	r23, r23
    1c10:	cb 01       	movw	r24, r22
    1c12:	97 f9       	bld	r25, 7
    1c14:	08 95       	ret

00001c16 <__gesf2>:
    1c16:	66 d0       	rcall	.+204    	; 0x1ce4 <__fp_cmp>
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <__gesf2+0x6>
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	08 95       	ret

00001c1e <__mulsf3>:
    1c1e:	0b d0       	rcall	.+22     	; 0x1c36 <__mulsf3x>
    1c20:	c0 cf       	rjmp	.-128    	; 0x1ba2 <__fp_round>
    1c22:	b1 df       	rcall	.-158    	; 0x1b86 <__fp_pscA>
    1c24:	28 f0       	brcs	.+10     	; 0x1c30 <__mulsf3+0x12>
    1c26:	b6 df       	rcall	.-148    	; 0x1b94 <__fp_pscB>
    1c28:	18 f0       	brcs	.+6      	; 0x1c30 <__mulsf3+0x12>
    1c2a:	95 23       	and	r25, r21
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <__mulsf3+0x12>
    1c2e:	a2 cf       	rjmp	.-188    	; 0x1b74 <__fp_inf>
    1c30:	a7 cf       	rjmp	.-178    	; 0x1b80 <__fp_nan>
    1c32:	11 24       	eor	r1, r1
    1c34:	ea cf       	rjmp	.-44     	; 0x1c0a <__fp_szero>

00001c36 <__mulsf3x>:
    1c36:	c6 df       	rcall	.-116    	; 0x1bc4 <__fp_split3>
    1c38:	a0 f3       	brcs	.-24     	; 0x1c22 <__mulsf3+0x4>

00001c3a <__mulsf3_pse>:
    1c3a:	95 9f       	mul	r25, r21
    1c3c:	d1 f3       	breq	.-12     	; 0x1c32 <__mulsf3+0x14>
    1c3e:	95 0f       	add	r25, r21
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	55 1f       	adc	r21, r21
    1c44:	62 9f       	mul	r22, r18
    1c46:	f0 01       	movw	r30, r0
    1c48:	72 9f       	mul	r23, r18
    1c4a:	bb 27       	eor	r27, r27
    1c4c:	f0 0d       	add	r31, r0
    1c4e:	b1 1d       	adc	r27, r1
    1c50:	63 9f       	mul	r22, r19
    1c52:	aa 27       	eor	r26, r26
    1c54:	f0 0d       	add	r31, r0
    1c56:	b1 1d       	adc	r27, r1
    1c58:	aa 1f       	adc	r26, r26
    1c5a:	64 9f       	mul	r22, r20
    1c5c:	66 27       	eor	r22, r22
    1c5e:	b0 0d       	add	r27, r0
    1c60:	a1 1d       	adc	r26, r1
    1c62:	66 1f       	adc	r22, r22
    1c64:	82 9f       	mul	r24, r18
    1c66:	22 27       	eor	r18, r18
    1c68:	b0 0d       	add	r27, r0
    1c6a:	a1 1d       	adc	r26, r1
    1c6c:	62 1f       	adc	r22, r18
    1c6e:	73 9f       	mul	r23, r19
    1c70:	b0 0d       	add	r27, r0
    1c72:	a1 1d       	adc	r26, r1
    1c74:	62 1f       	adc	r22, r18
    1c76:	83 9f       	mul	r24, r19
    1c78:	a0 0d       	add	r26, r0
    1c7a:	61 1d       	adc	r22, r1
    1c7c:	22 1f       	adc	r18, r18
    1c7e:	74 9f       	mul	r23, r20
    1c80:	33 27       	eor	r19, r19
    1c82:	a0 0d       	add	r26, r0
    1c84:	61 1d       	adc	r22, r1
    1c86:	23 1f       	adc	r18, r19
    1c88:	84 9f       	mul	r24, r20
    1c8a:	60 0d       	add	r22, r0
    1c8c:	21 1d       	adc	r18, r1
    1c8e:	82 2f       	mov	r24, r18
    1c90:	76 2f       	mov	r23, r22
    1c92:	6a 2f       	mov	r22, r26
    1c94:	11 24       	eor	r1, r1
    1c96:	9f 57       	subi	r25, 0x7F	; 127
    1c98:	50 40       	sbci	r21, 0x00	; 0
    1c9a:	8a f0       	brmi	.+34     	; 0x1cbe <__mulsf3_pse+0x84>
    1c9c:	e1 f0       	breq	.+56     	; 0x1cd6 <__mulsf3_pse+0x9c>
    1c9e:	88 23       	and	r24, r24
    1ca0:	4a f0       	brmi	.+18     	; 0x1cb4 <__mulsf3_pse+0x7a>
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	bb 1f       	adc	r27, r27
    1ca8:	66 1f       	adc	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	88 1f       	adc	r24, r24
    1cae:	91 50       	subi	r25, 0x01	; 1
    1cb0:	50 40       	sbci	r21, 0x00	; 0
    1cb2:	a9 f7       	brne	.-22     	; 0x1c9e <__mulsf3_pse+0x64>
    1cb4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cb6:	51 05       	cpc	r21, r1
    1cb8:	70 f0       	brcs	.+28     	; 0x1cd6 <__mulsf3_pse+0x9c>
    1cba:	5c cf       	rjmp	.-328    	; 0x1b74 <__fp_inf>
    1cbc:	a6 cf       	rjmp	.-180    	; 0x1c0a <__fp_szero>
    1cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    1cc0:	ec f3       	brlt	.-6      	; 0x1cbc <__mulsf3_pse+0x82>
    1cc2:	98 3e       	cpi	r25, 0xE8	; 232
    1cc4:	dc f3       	brlt	.-10     	; 0x1cbc <__mulsf3_pse+0x82>
    1cc6:	86 95       	lsr	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b7 95       	ror	r27
    1cce:	f7 95       	ror	r31
    1cd0:	e7 95       	ror	r30
    1cd2:	9f 5f       	subi	r25, 0xFF	; 255
    1cd4:	c1 f7       	brne	.-16     	; 0x1cc6 <__mulsf3_pse+0x8c>
    1cd6:	fe 2b       	or	r31, r30
    1cd8:	88 0f       	add	r24, r24
    1cda:	91 1d       	adc	r25, r1
    1cdc:	96 95       	lsr	r25
    1cde:	87 95       	ror	r24
    1ce0:	97 f9       	bld	r25, 7
    1ce2:	08 95       	ret

00001ce4 <__fp_cmp>:
    1ce4:	99 0f       	add	r25, r25
    1ce6:	00 08       	sbc	r0, r0
    1ce8:	55 0f       	add	r21, r21
    1cea:	aa 0b       	sbc	r26, r26
    1cec:	e0 e8       	ldi	r30, 0x80	; 128
    1cee:	fe ef       	ldi	r31, 0xFE	; 254
    1cf0:	16 16       	cp	r1, r22
    1cf2:	17 06       	cpc	r1, r23
    1cf4:	e8 07       	cpc	r30, r24
    1cf6:	f9 07       	cpc	r31, r25
    1cf8:	c0 f0       	brcs	.+48     	; 0x1d2a <__fp_cmp+0x46>
    1cfa:	12 16       	cp	r1, r18
    1cfc:	13 06       	cpc	r1, r19
    1cfe:	e4 07       	cpc	r30, r20
    1d00:	f5 07       	cpc	r31, r21
    1d02:	98 f0       	brcs	.+38     	; 0x1d2a <__fp_cmp+0x46>
    1d04:	62 1b       	sub	r22, r18
    1d06:	73 0b       	sbc	r23, r19
    1d08:	84 0b       	sbc	r24, r20
    1d0a:	95 0b       	sbc	r25, r21
    1d0c:	39 f4       	brne	.+14     	; 0x1d1c <__fp_cmp+0x38>
    1d0e:	0a 26       	eor	r0, r26
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <__fp_cmp+0x46>
    1d12:	23 2b       	or	r18, r19
    1d14:	24 2b       	or	r18, r20
    1d16:	25 2b       	or	r18, r21
    1d18:	21 f4       	brne	.+8      	; 0x1d22 <__fp_cmp+0x3e>
    1d1a:	08 95       	ret
    1d1c:	0a 26       	eor	r0, r26
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <__fp_cmp+0x3e>
    1d20:	a1 40       	sbci	r26, 0x01	; 1
    1d22:	a6 95       	lsr	r26
    1d24:	8f ef       	ldi	r24, 0xFF	; 255
    1d26:	81 1d       	adc	r24, r1
    1d28:	81 1d       	adc	r24, r1
    1d2a:	08 95       	ret

00001d2c <__udivmodsi4>:
    1d2c:	a1 e2       	ldi	r26, 0x21	; 33
    1d2e:	1a 2e       	mov	r1, r26
    1d30:	aa 1b       	sub	r26, r26
    1d32:	bb 1b       	sub	r27, r27
    1d34:	fd 01       	movw	r30, r26
    1d36:	0d c0       	rjmp	.+26     	; 0x1d52 <__udivmodsi4_ep>

00001d38 <__udivmodsi4_loop>:
    1d38:	aa 1f       	adc	r26, r26
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	ee 1f       	adc	r30, r30
    1d3e:	ff 1f       	adc	r31, r31
    1d40:	a2 17       	cp	r26, r18
    1d42:	b3 07       	cpc	r27, r19
    1d44:	e4 07       	cpc	r30, r20
    1d46:	f5 07       	cpc	r31, r21
    1d48:	20 f0       	brcs	.+8      	; 0x1d52 <__udivmodsi4_ep>
    1d4a:	a2 1b       	sub	r26, r18
    1d4c:	b3 0b       	sbc	r27, r19
    1d4e:	e4 0b       	sbc	r30, r20
    1d50:	f5 0b       	sbc	r31, r21

00001d52 <__udivmodsi4_ep>:
    1d52:	66 1f       	adc	r22, r22
    1d54:	77 1f       	adc	r23, r23
    1d56:	88 1f       	adc	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	1a 94       	dec	r1
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <__udivmodsi4_loop>
    1d5e:	60 95       	com	r22
    1d60:	70 95       	com	r23
    1d62:	80 95       	com	r24
    1d64:	90 95       	com	r25
    1d66:	9b 01       	movw	r18, r22
    1d68:	ac 01       	movw	r20, r24
    1d6a:	bd 01       	movw	r22, r26
    1d6c:	cf 01       	movw	r24, r30
    1d6e:	08 95       	ret

00001d70 <atoi>:
    1d70:	fc 01       	movw	r30, r24
    1d72:	88 27       	eor	r24, r24
    1d74:	99 27       	eor	r25, r25
    1d76:	e8 94       	clt
    1d78:	21 91       	ld	r18, Z+
    1d7a:	20 32       	cpi	r18, 0x20	; 32
    1d7c:	e9 f3       	breq	.-6      	; 0x1d78 <atoi+0x8>
    1d7e:	29 30       	cpi	r18, 0x09	; 9
    1d80:	10 f0       	brcs	.+4      	; 0x1d86 <atoi+0x16>
    1d82:	2e 30       	cpi	r18, 0x0E	; 14
    1d84:	c8 f3       	brcs	.-14     	; 0x1d78 <atoi+0x8>
    1d86:	2b 32       	cpi	r18, 0x2B	; 43
    1d88:	39 f0       	breq	.+14     	; 0x1d98 <atoi+0x28>
    1d8a:	2d 32       	cpi	r18, 0x2D	; 45
    1d8c:	31 f4       	brne	.+12     	; 0x1d9a <atoi+0x2a>
    1d8e:	68 94       	set
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <atoi+0x28>
    1d92:	1e d0       	rcall	.+60     	; 0x1dd0 <__mulhi_const_10>
    1d94:	82 0f       	add	r24, r18
    1d96:	91 1d       	adc	r25, r1
    1d98:	21 91       	ld	r18, Z+
    1d9a:	20 53       	subi	r18, 0x30	; 48
    1d9c:	2a 30       	cpi	r18, 0x0A	; 10
    1d9e:	c8 f3       	brcs	.-14     	; 0x1d92 <atoi+0x22>
    1da0:	1e f4       	brtc	.+6      	; 0x1da8 <atoi+0x38>
    1da2:	90 95       	com	r25
    1da4:	81 95       	neg	r24
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	08 95       	ret

00001daa <strcmp>:
    1daa:	fb 01       	movw	r30, r22
    1dac:	dc 01       	movw	r26, r24
    1dae:	8d 91       	ld	r24, X+
    1db0:	01 90       	ld	r0, Z+
    1db2:	80 19       	sub	r24, r0
    1db4:	01 10       	cpse	r0, r1
    1db6:	d9 f3       	breq	.-10     	; 0x1dae <strcmp+0x4>
    1db8:	99 0b       	sbc	r25, r25
    1dba:	08 95       	ret

00001dbc <__itoa_ncheck>:
    1dbc:	bb 27       	eor	r27, r27
    1dbe:	4a 30       	cpi	r20, 0x0A	; 10
    1dc0:	31 f4       	brne	.+12     	; 0x1dce <__itoa_ncheck+0x12>
    1dc2:	99 23       	and	r25, r25
    1dc4:	22 f4       	brpl	.+8      	; 0x1dce <__itoa_ncheck+0x12>
    1dc6:	bd e2       	ldi	r27, 0x2D	; 45
    1dc8:	90 95       	com	r25
    1dca:	81 95       	neg	r24
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	09 c0       	rjmp	.+18     	; 0x1de2 <__utoa_common>

00001dd0 <__mulhi_const_10>:
    1dd0:	7a e0       	ldi	r23, 0x0A	; 10
    1dd2:	97 9f       	mul	r25, r23
    1dd4:	90 2d       	mov	r25, r0
    1dd6:	87 9f       	mul	r24, r23
    1dd8:	80 2d       	mov	r24, r0
    1dda:	91 0d       	add	r25, r1
    1ddc:	11 24       	eor	r1, r1
    1dde:	08 95       	ret

00001de0 <__utoa_ncheck>:
    1de0:	bb 27       	eor	r27, r27

00001de2 <__utoa_common>:
    1de2:	fb 01       	movw	r30, r22
    1de4:	55 27       	eor	r21, r21
    1de6:	aa 27       	eor	r26, r26
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	aa 1f       	adc	r26, r26
    1dee:	a4 17       	cp	r26, r20
    1df0:	10 f0       	brcs	.+4      	; 0x1df6 <__utoa_common+0x14>
    1df2:	a4 1b       	sub	r26, r20
    1df4:	83 95       	inc	r24
    1df6:	50 51       	subi	r21, 0x10	; 16
    1df8:	b9 f7       	brne	.-18     	; 0x1de8 <__utoa_common+0x6>
    1dfa:	a0 5d       	subi	r26, 0xD0	; 208
    1dfc:	aa 33       	cpi	r26, 0x3A	; 58
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <__utoa_common+0x20>
    1e00:	a9 5d       	subi	r26, 0xD9	; 217
    1e02:	a1 93       	st	Z+, r26
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	79 f7       	brne	.-34     	; 0x1de6 <__utoa_common+0x4>
    1e08:	b1 11       	cpse	r27, r1
    1e0a:	b1 93       	st	Z+, r27
    1e0c:	11 92       	st	Z+, r1
    1e0e:	cb 01       	movw	r24, r22
    1e10:	00 c0       	rjmp	.+0      	; 0x1e12 <strrev>

00001e12 <strrev>:
    1e12:	dc 01       	movw	r26, r24
    1e14:	fc 01       	movw	r30, r24
    1e16:	67 2f       	mov	r22, r23
    1e18:	71 91       	ld	r23, Z+
    1e1a:	77 23       	and	r23, r23
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <strrev+0x4>
    1e1e:	32 97       	sbiw	r30, 0x02	; 2
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <strrev+0x18>
    1e22:	7c 91       	ld	r23, X
    1e24:	6d 93       	st	X+, r22
    1e26:	70 83       	st	Z, r23
    1e28:	62 91       	ld	r22, -Z
    1e2a:	ae 17       	cp	r26, r30
    1e2c:	bf 07       	cpc	r27, r31
    1e2e:	c8 f3       	brcs	.-14     	; 0x1e22 <strrev+0x10>
    1e30:	08 95       	ret

00001e32 <_exit>:
    1e32:	f8 94       	cli

00001e34 <__stop_program>:
    1e34:	ff cf       	rjmp	.-2      	; 0x1e34 <__stop_program>


Motors_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000300  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b4a  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000730  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071c  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c8  00000000  00000000  000020a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b4  00000000  00000000  00002568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
   4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_12>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	db 00       	.word	0x00db	; ????
  56:	de 00       	.word	0x00de	; ????
  58:	e1 00       	.word	0x00e1	; ????
  5a:	e4 00       	.word	0x00e4	; ????
  5c:	e7 00       	.word	0x00e7	; ????
  5e:	ea 00       	.word	0x00ea	; ????
  60:	ec 00       	.word	0x00ec	; ????
  62:	ec 00       	.word	0x00ec	; ????
  64:	ec 00       	.word	0x00ec	; ????
  66:	ec 00       	.word	0x00ec	; ????
  68:	ec 00       	.word	0x00ec	; ????
  6a:	ec 00       	.word	0x00ec	; ????
  6c:	ec 00       	.word	0x00ec	; ????
  6e:	ec 00       	.word	0x00ec	; ????
  70:	ec 00       	.word	0x00ec	; ????
  72:	ec 00       	.word	0x00ec	; ????
  74:	ec 00       	.word	0x00ec	; ????
  76:	ec 00       	.word	0x00ec	; ????
  78:	ec 00       	.word	0x00ec	; ????
  7a:	ec 00       	.word	0x00ec	; ????
  7c:	d2 00       	.word	0x00d2	; ????
  7e:	d5 00       	.word	0x00d5	; ????
  80:	d8 00       	.word	0x00d8	; ????

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d8 e0       	ldi	r29, 0x08	; 8
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_clear_bss>:
  8e:	20 e0       	ldi	r18, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a1 36       	cpi	r26, 0x61	; 97
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>
  9e:	0e 94 12 01 	call	0x224	; 0x224 <main>
  a2:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <Registers_init>:

unsigned char rxdata;

void Registers_init()
{
	timer2_init();
  aa:	0e 94 29 01 	call	0x252	; 0x252 <timer2_init>
	timer0_init();
  ae:	0e 94 26 01 	call	0x24c	; 0x24c <timer0_init>
	SPI_init_Slave();
  b2:	0e 94 17 01 	call	0x22e	; 0x22e <SPI_init_Slave>
	//sei();
	setbit(DDRA,0);
  b6:	8a b3       	in	r24, 0x1a	; 26
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8a bb       	out	0x1a, r24	; 26
	setbit(DDRA,1);
  bc:	8a b3       	in	r24, 0x1a	; 26
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	8a bb       	out	0x1a, r24	; 26
	setbit(DDRB,3);
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	87 bb       	out	0x17, r24	; 23
	setbit(DDRD,7);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	81 bb       	out	0x11, r24	; 17
	SREG |= (1<<7);  //global interrupt enable
  ce:	8f b7       	in	r24, 0x3f	; 63
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8f bf       	out	0x3f, r24	; 63
	clearbit(DDRD,2);
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	81 bb       	out	0x11, r24	; 17
	GICR |=(1<<6);  //External Interrupt Request 0 Enable
  da:	8b b7       	in	r24, 0x3b	; 59
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	8b bf       	out	0x3b, r24	; 59
  e0:	08 95       	ret

000000e2 <move_forward_low>:
	}
}

void move_forward_low()
{
	setbit(PORTA,0);
  e2:	8b b3       	in	r24, 0x1b	; 27
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,1);
  e8:	8b b3       	in	r24, 0x1b	; 27
  ea:	8d 7f       	andi	r24, 0xFD	; 253
  ec:	8b bb       	out	0x1b, r24	; 27
	timer0_low();
  ee:	0e 94 2c 01 	call	0x258	; 0x258 <timer0_low>
	timer2_low();
  f2:	0e 94 35 01 	call	0x26a	; 0x26a <timer2_low>
  f6:	08 95       	ret

000000f8 <move_forward_mid>:
}
void move_forward_mid()
{
	setbit(PORTA,0);
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,1);
  fe:	8b b3       	in	r24, 0x1b	; 27
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	8b bb       	out	0x1b, r24	; 27
	timer0_med();
 104:	0e 94 2f 01 	call	0x25e	; 0x25e <timer0_med>
	timer2_med();
 108:	0e 94 38 01 	call	0x270	; 0x270 <timer2_med>
 10c:	08 95       	ret

0000010e <move_forward_high>:
}
void move_forward_high()
{
	setbit(PORTA,0);
 10e:	8b b3       	in	r24, 0x1b	; 27
 110:	81 60       	ori	r24, 0x01	; 1
 112:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,1);
 114:	8b b3       	in	r24, 0x1b	; 27
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	8b bb       	out	0x1b, r24	; 27
	timer0_high();
 11a:	0e 94 32 01 	call	0x264	; 0x264 <timer0_high>
	timer2_high();
 11e:	0e 94 3b 01 	call	0x276	; 0x276 <timer2_high>
 122:	08 95       	ret

00000124 <move_backward_low>:
}
void move_backward_low()
{
	setbit(PORTA,1);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	82 60       	ori	r24, 0x02	; 2
 128:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,0);
 12a:	8b b3       	in	r24, 0x1b	; 27
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	8b bb       	out	0x1b, r24	; 27
	timer0_low();
 130:	0e 94 2c 01 	call	0x258	; 0x258 <timer0_low>
	timer2_low();
 134:	0e 94 35 01 	call	0x26a	; 0x26a <timer2_low>
 138:	08 95       	ret

0000013a <move_backward_mid>:
}
void move_backward_mid()
{
	setbit(PORTA,1);
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,0);
 140:	8b b3       	in	r24, 0x1b	; 27
 142:	8e 7f       	andi	r24, 0xFE	; 254
 144:	8b bb       	out	0x1b, r24	; 27
	timer0_med();
 146:	0e 94 2f 01 	call	0x25e	; 0x25e <timer0_med>
	timer2_med();
 14a:	0e 94 38 01 	call	0x270	; 0x270 <timer2_med>
 14e:	08 95       	ret

00000150 <move_backward_high>:
}
void move_backward_high()
{
	setbit(PORTA,1);
 150:	8b b3       	in	r24, 0x1b	; 27
 152:	82 60       	ori	r24, 0x02	; 2
 154:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,0);
 156:	8b b3       	in	r24, 0x1b	; 27
 158:	8e 7f       	andi	r24, 0xFE	; 254
 15a:	8b bb       	out	0x1b, r24	; 27
	timer0_high();
 15c:	0e 94 32 01 	call	0x264	; 0x264 <timer0_high>
	timer2_high();
 160:	0e 94 3b 01 	call	0x276	; 0x276 <timer2_high>
 164:	08 95       	ret

00000166 <rotate_left>:
}
void rotate_left()
{
	timer0_med();
 166:	0e 94 2f 01 	call	0x25e	; 0x25e <timer0_med>
	OCR2=0;
 16a:	13 bc       	out	0x23, r1	; 35
 16c:	08 95       	ret

0000016e <rotate_right>:
}
void rotate_right()
{
	OCR0=0;
 16e:	1c be       	out	0x3c, r1	; 60
	timer2_med();
 170:	0e 94 38 01 	call	0x270	; 0x270 <timer2_med>
 174:	08 95       	ret

00000176 <stop>:
}
void stop()
{
	OCR2=0;
 176:	13 bc       	out	0x23, r1	; 35
	OCR0=0;
 178:	1c be       	out	0x3c, r1	; 60
	clearbit(PORTA,0);
 17a:	8b b3       	in	r24, 0x1b	; 27
 17c:	8e 7f       	andi	r24, 0xFE	; 254
 17e:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,1);
 180:	8b b3       	in	r24, 0x1b	; 27
 182:	8d 7f       	andi	r24, 0xFD	; 253
 184:	8b bb       	out	0x1b, r24	; 27
 186:	08 95       	ret

00000188 <app>:

}

void app()
{
		switch(rxdata)
 188:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18c:	8e 2f       	mov	r24, r30
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	fc 01       	movw	r30, r24
 192:	e4 56       	subi	r30, 0x64	; 100
 194:	f1 09       	sbc	r31, r1
 196:	e7 31       	cpi	r30, 0x17	; 23
 198:	f1 05       	cpc	r31, r1
 19a:	f0 f4       	brcc	.+60     	; 0x1d8 <app+0x50>
 19c:	e6 5d       	subi	r30, 0xD6	; 214
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__tablejump2__>
		{
			case'x': move_forward_low();break;
 1a4:	0e 94 71 00 	call	0xe2	; 0xe2 <move_forward_low>
 1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <app+0x50>
			case'y': move_forward_mid();break;
 1aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <move_forward_mid>
 1ae:	14 c0       	rjmp	.+40     	; 0x1d8 <app+0x50>
			case'z': move_forward_high();break;
 1b0:	0e 94 87 00 	call	0x10e	; 0x10e <move_forward_high>
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <app+0x50>
			case'd': move_backward_low();break;
 1b6:	0e 94 92 00 	call	0x124	; 0x124 <move_backward_low>
 1ba:	0e c0       	rjmp	.+28     	; 0x1d8 <app+0x50>
			case'e': move_backward_mid();break;
 1bc:	0e 94 9d 00 	call	0x13a	; 0x13a <move_backward_mid>
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <app+0x50>
			case'f': move_backward_high();break;
 1c2:	0e 94 a8 00 	call	0x150	; 0x150 <move_backward_high>
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <app+0x50>
			case'g': rotate_left();break;
 1c8:	0e 94 b3 00 	call	0x166	; 0x166 <rotate_left>
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <app+0x50>
			case'h': rotate_right();break;
 1ce:	0e 94 b7 00 	call	0x16e	; 0x16e <rotate_right>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <app+0x50>
			case'i': stop();break;
 1d4:	0e 94 bb 00 	call	0x176	; 0x176 <stop>
			default: break;
		}
	if (readbit(PIND,2)==0)
 1d8:	82 99       	sbic	0x10, 2	; 16
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <app+0x58>
	{
		while(readbit(PIND,2)==0)
 1dc:	82 9b       	sbis	0x10, 2	; 16
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <app+0x54>
 1e0:	08 95       	ret

000001e2 <__vector_12>:
	clearbit(PORTA,0);
	clearbit(PORTA,1);
}

ISR(SPI_STC_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
	rxdata=SPDR;
 1ee:	8f b1       	in	r24, 0x0f	; 15
 1f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1f4:	8f 91       	pop	r24
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_1>:
ISR(INT0_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
	clearbit(PORTA,0);
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	8b bb       	out	0x1b, r24	; 27
	clearbit(PORTA,1);
 212:	8b b3       	in	r24, 0x1b	; 27
 214:	8d 7f       	andi	r24, 0xFD	; 253
 216:	8b bb       	out	0x1b, r24	; 27
}
 218:	8f 91       	pop	r24
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:
#include "App.h"

int main(void)
{
	Registers_init();
 224:	0e 94 55 00 	call	0xaa	; 0xaa <Registers_init>
    while (1) 
    {
		app();
 228:	0e 94 c4 00 	call	0x188	; 0x188 <app>
 22c:	fd cf       	rjmp	.-6      	; 0x228 <main+0x4>

0000022e <SPI_init_Slave>:
 22e:	87 b3       	in	r24, 0x17	; 23
 230:	8f 7d       	andi	r24, 0xDF	; 223
 232:	87 bb       	out	0x17, r24	; 23
 234:	87 b3       	in	r24, 0x17	; 23
 236:	8f 7e       	andi	r24, 0xEF	; 239
 238:	87 bb       	out	0x17, r24	; 23
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	87 bb       	out	0x17, r24	; 23
 240:	87 b3       	in	r24, 0x17	; 23
 242:	8f 77       	andi	r24, 0x7F	; 127
 244:	87 bb       	out	0x17, r24	; 23
 246:	80 ec       	ldi	r24, 0xC0	; 192
 248:	8d b9       	out	0x0d, r24	; 13
 24a:	08 95       	ret

0000024c <timer0_init>:
﻿#include "timer.h"

void timer0_init(void)
{
	TCCR0 = 0b01101001;
 24c:	89 e6       	ldi	r24, 0x69	; 105
 24e:	83 bf       	out	0x33, r24	; 51
 250:	08 95       	ret

00000252 <timer2_init>:
}
void timer2_init(void)
{
	TCCR2 = 0b01101001;
 252:	89 e6       	ldi	r24, 0x69	; 105
 254:	85 bd       	out	0x25, r24	; 37
 256:	08 95       	ret

00000258 <timer0_low>:
}

void timer0_low()
{
	OCR0=180;
 258:	84 eb       	ldi	r24, 0xB4	; 180
 25a:	8c bf       	out	0x3c, r24	; 60
 25c:	08 95       	ret

0000025e <timer0_med>:
}
void timer0_med()
{
	OCR0=195;
 25e:	83 ec       	ldi	r24, 0xC3	; 195
 260:	8c bf       	out	0x3c, r24	; 60
 262:	08 95       	ret

00000264 <timer0_high>:
}
void timer0_high()
{
	OCR0=210;
 264:	82 ed       	ldi	r24, 0xD2	; 210
 266:	8c bf       	out	0x3c, r24	; 60
 268:	08 95       	ret

0000026a <timer2_low>:
}
void timer2_low()
{
	OCR2=180;
 26a:	84 eb       	ldi	r24, 0xB4	; 180
 26c:	83 bd       	out	0x23, r24	; 35
 26e:	08 95       	ret

00000270 <timer2_med>:
}
void timer2_med()
{
	OCR2=195;
 270:	83 ec       	ldi	r24, 0xC3	; 195
 272:	83 bd       	out	0x23, r24	; 35
 274:	08 95       	ret

00000276 <timer2_high>:
}
void timer2_high()
{
	OCR2=210;
 276:	82 ed       	ldi	r24, 0xD2	; 210
 278:	83 bd       	out	0x23, r24	; 35
 27a:	08 95       	ret

0000027c <__tablejump2__>:
 27c:	ee 0f       	add	r30, r30
 27e:	ff 1f       	adc	r31, r31
 280:	05 90       	lpm	r0, Z+
 282:	f4 91       	lpm	r31, Z
 284:	e0 2d       	mov	r30, r0
 286:	09 94       	ijmp

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
